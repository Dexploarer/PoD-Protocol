/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const WITHDRAW_ESCROW_DISCRIMINATOR = new Uint8Array([
  81, 84, 226, 128, 245, 47, 96, 104,
]);

export function getWithdrawEscrowDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_ESCROW_DISCRIMINATOR
  );
}

export type WithdrawEscrowInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountEscrowAccount extends string | IAccountMeta<string> = string,
  TAccountChannelAccount extends string | IAccountMeta<string> = string,
  TAccountDepositor extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountEscrowAccount extends string
        ? WritableAccount<TAccountEscrowAccount>
        : TAccountEscrowAccount,
      TAccountChannelAccount extends string
        ? WritableAccount<TAccountChannelAccount>
        : TAccountChannelAccount,
      TAccountDepositor extends string
        ? WritableSignerAccount<TAccountDepositor> &
            IAccountSignerMeta<TAccountDepositor>
        : TAccountDepositor,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawEscrowInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type WithdrawEscrowInstructionDataArgs = { amount: number | bigint };

export function getWithdrawEscrowInstructionDataEncoder(): Encoder<WithdrawEscrowInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WITHDRAW_ESCROW_DISCRIMINATOR })
  );
}

export function getWithdrawEscrowInstructionDataDecoder(): Decoder<WithdrawEscrowInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getWithdrawEscrowInstructionDataCodec(): Codec<
  WithdrawEscrowInstructionDataArgs,
  WithdrawEscrowInstructionData
> {
  return combineCodec(
    getWithdrawEscrowInstructionDataEncoder(),
    getWithdrawEscrowInstructionDataDecoder()
  );
}

export type WithdrawEscrowAsyncInput<
  TAccountEscrowAccount extends string = string,
  TAccountChannelAccount extends string = string,
  TAccountDepositor extends string = string,
> = {
  escrowAccount?: Address<TAccountEscrowAccount>;
  channelAccount: Address<TAccountChannelAccount>;
  depositor: TransactionSigner<TAccountDepositor>;
  amount: WithdrawEscrowInstructionDataArgs['amount'];
};

export async function getWithdrawEscrowInstructionAsync<
  TAccountEscrowAccount extends string,
  TAccountChannelAccount extends string,
  TAccountDepositor extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: WithdrawEscrowAsyncInput<
    TAccountEscrowAccount,
    TAccountChannelAccount,
    TAccountDepositor
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  WithdrawEscrowInstruction<
    TProgramAddress,
    TAccountEscrowAccount,
    TAccountChannelAccount,
    TAccountDepositor
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    escrowAccount: { value: input.escrowAccount ?? null, isWritable: true },
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    depositor: { value: input.depositor ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.escrowAccount.value) {
    accounts.escrowAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([101, 115, 99, 114, 111, 119])),
        getAddressEncoder().encode(
          expectAddress(accounts.channelAccount.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.depositor.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrowAccount),
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.depositor),
    ],
    programAddress,
    data: getWithdrawEscrowInstructionDataEncoder().encode(
      args as WithdrawEscrowInstructionDataArgs
    ),
  } as WithdrawEscrowInstruction<
    TProgramAddress,
    TAccountEscrowAccount,
    TAccountChannelAccount,
    TAccountDepositor
  >;

  return instruction;
}

export type WithdrawEscrowInput<
  TAccountEscrowAccount extends string = string,
  TAccountChannelAccount extends string = string,
  TAccountDepositor extends string = string,
> = {
  escrowAccount: Address<TAccountEscrowAccount>;
  channelAccount: Address<TAccountChannelAccount>;
  depositor: TransactionSigner<TAccountDepositor>;
  amount: WithdrawEscrowInstructionDataArgs['amount'];
};

export function getWithdrawEscrowInstruction<
  TAccountEscrowAccount extends string,
  TAccountChannelAccount extends string,
  TAccountDepositor extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: WithdrawEscrowInput<
    TAccountEscrowAccount,
    TAccountChannelAccount,
    TAccountDepositor
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawEscrowInstruction<
  TProgramAddress,
  TAccountEscrowAccount,
  TAccountChannelAccount,
  TAccountDepositor
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    escrowAccount: { value: input.escrowAccount ?? null, isWritable: true },
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    depositor: { value: input.depositor ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrowAccount),
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.depositor),
    ],
    programAddress,
    data: getWithdrawEscrowInstructionDataEncoder().encode(
      args as WithdrawEscrowInstructionDataArgs
    ),
  } as WithdrawEscrowInstruction<
    TProgramAddress,
    TAccountEscrowAccount,
    TAccountChannelAccount,
    TAccountDepositor
  >;

  return instruction;
}

export type ParsedWithdrawEscrowInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    escrowAccount: TAccountMetas[0];
    channelAccount: TAccountMetas[1];
    depositor: TAccountMetas[2];
  };
  data: WithdrawEscrowInstructionData;
};

export function parseWithdrawEscrowInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWithdrawEscrowInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    throw new Error('WithdrawEscrow instruction: Insufficient accounts provided. Expected at least required accounts for escrow withdrawal');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      escrowAccount: getNextAccount(),
      channelAccount: getNextAccount(),
      depositor: getNextAccount(),
    },
    data: getWithdrawEscrowInstructionDataDecoder().decode(instruction.data),
  };
}
