/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getMessageStatusDecoder,
  getMessageStatusEncoder,
  type MessageStatus,
  type MessageStatusArgs,
} from '../types';

export const UPDATE_MESSAGE_STATUS_DISCRIMINATOR = new Uint8Array([
  82, 100, 156, 74, 97, 190, 248, 132,
]);

export function getUpdateMessageStatusDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_MESSAGE_STATUS_DISCRIMINATOR
  );
}

export type UpdateMessageStatusInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountMessageAccount extends string | IAccountMeta<string> = string,
  TAccountRecipientAgent extends string | IAccountMeta<string> = string,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMessageAccount extends string
        ? WritableAccount<TAccountMessageAccount>
        : TAccountMessageAccount,
      TAccountRecipientAgent extends string
        ? ReadonlyAccount<TAccountRecipientAgent>
        : TAccountRecipientAgent,
      TAccountSigner extends string
        ? ReadonlySignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateMessageStatusInstructionData = {
  discriminator: ReadonlyUint8Array;
  newStatus: MessageStatus;
};

export type UpdateMessageStatusInstructionDataArgs = {
  newStatus: MessageStatusArgs;
};

export function getUpdateMessageStatusInstructionDataEncoder(): Encoder<UpdateMessageStatusInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newStatus', getMessageStatusEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_MESSAGE_STATUS_DISCRIMINATOR,
    })
  );
}

export function getUpdateMessageStatusInstructionDataDecoder(): Decoder<UpdateMessageStatusInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newStatus', getMessageStatusDecoder()],
  ]);
}

export function getUpdateMessageStatusInstructionDataCodec(): Codec<
  UpdateMessageStatusInstructionDataArgs,
  UpdateMessageStatusInstructionData
> {
  return combineCodec(
    getUpdateMessageStatusInstructionDataEncoder(),
    getUpdateMessageStatusInstructionDataDecoder()
  );
}

export type UpdateMessageStatusAsyncInput<
  TAccountMessageAccount extends string = string,
  TAccountRecipientAgent extends string = string,
  TAccountSigner extends string = string,
> = {
  messageAccount: Address<TAccountMessageAccount>;
  recipientAgent?: Address<TAccountRecipientAgent>;
  signer: TransactionSigner<TAccountSigner>;
  newStatus: UpdateMessageStatusInstructionDataArgs['newStatus'];
};

export async function getUpdateMessageStatusInstructionAsync<
  TAccountMessageAccount extends string,
  TAccountRecipientAgent extends string,
  TAccountSigner extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: UpdateMessageStatusAsyncInput<
    TAccountMessageAccount,
    TAccountRecipientAgent,
    TAccountSigner
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateMessageStatusInstruction<
    TProgramAddress,
    TAccountMessageAccount,
    TAccountRecipientAgent,
    TAccountSigner
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    messageAccount: { value: input.messageAccount ?? null, isWritable: true },
    recipientAgent: { value: input.recipientAgent ?? null, isWritable: false },
    signer: { value: input.signer ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.recipientAgent.value) {
    accounts.recipientAgent.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.messageAccount),
      getAccountMeta(accounts.recipientAgent),
      getAccountMeta(accounts.signer),
    ],
    programAddress,
    data: getUpdateMessageStatusInstructionDataEncoder().encode(
      args as UpdateMessageStatusInstructionDataArgs
    ),
  } as UpdateMessageStatusInstruction<
    TProgramAddress,
    TAccountMessageAccount,
    TAccountRecipientAgent,
    TAccountSigner
  >;

  return instruction;
}

export type UpdateMessageStatusInput<
  TAccountMessageAccount extends string = string,
  TAccountRecipientAgent extends string = string,
  TAccountSigner extends string = string,
> = {
  messageAccount: Address<TAccountMessageAccount>;
  recipientAgent: Address<TAccountRecipientAgent>;
  signer: TransactionSigner<TAccountSigner>;
  newStatus: UpdateMessageStatusInstructionDataArgs['newStatus'];
};

export function getUpdateMessageStatusInstruction<
  TAccountMessageAccount extends string,
  TAccountRecipientAgent extends string,
  TAccountSigner extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: UpdateMessageStatusInput<
    TAccountMessageAccount,
    TAccountRecipientAgent,
    TAccountSigner
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateMessageStatusInstruction<
  TProgramAddress,
  TAccountMessageAccount,
  TAccountRecipientAgent,
  TAccountSigner
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    messageAccount: { value: input.messageAccount ?? null, isWritable: true },
    recipientAgent: { value: input.recipientAgent ?? null, isWritable: false },
    signer: { value: input.signer ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.messageAccount),
      getAccountMeta(accounts.recipientAgent),
      getAccountMeta(accounts.signer),
    ],
    programAddress,
    data: getUpdateMessageStatusInstructionDataEncoder().encode(
      args as UpdateMessageStatusInstructionDataArgs
    ),
  } as UpdateMessageStatusInstruction<
    TProgramAddress,
    TAccountMessageAccount,
    TAccountRecipientAgent,
    TAccountSigner
  >;

  return instruction;
}

export type ParsedUpdateMessageStatusInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    messageAccount: TAccountMetas[0];
    recipientAgent: TAccountMetas[1];
    signer: TAccountMetas[2];
  };
  data: UpdateMessageStatusInstructionData;
};

export function parseUpdateMessageStatusInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateMessageStatusInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    throw new Error('UpdateMessageStatus instruction: Insufficient accounts provided. Expected at least 2 accounts (messageAccount, authority)');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      messageAccount: getNextAccount(),
      recipientAgent: getNextAccount(),
      signer: getNextAccount(),
    },
    data: getUpdateMessageStatusInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
