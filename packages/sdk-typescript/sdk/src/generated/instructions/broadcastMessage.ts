/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getMessageTypeDecoder,
  getMessageTypeEncoder,
  type MessageType,
  type MessageTypeArgs,
} from '../types';

export const BROADCAST_MESSAGE_DISCRIMINATOR = new Uint8Array([
  253, 144, 203, 42, 219, 122, 147, 97,
]);

export function getBroadcastMessageDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BROADCAST_MESSAGE_DISCRIMINATOR
  );
}

export type BroadcastMessageInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountChannelAccount extends string | IAccountMeta<string> = string,
  TAccountParticipantAccount extends string | IAccountMeta<string> = string,
  TAccountAgentAccount extends string | IAccountMeta<string> = string,
  TAccountMessageAccount extends string | IAccountMeta<string> = string,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountChannelAccount extends string
        ? WritableAccount<TAccountChannelAccount>
        : TAccountChannelAccount,
      TAccountParticipantAccount extends string
        ? WritableAccount<TAccountParticipantAccount>
        : TAccountParticipantAccount,
      TAccountAgentAccount extends string
        ? ReadonlyAccount<TAccountAgentAccount>
        : TAccountAgentAccount,
      TAccountMessageAccount extends string
        ? WritableAccount<TAccountMessageAccount>
        : TAccountMessageAccount,
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type BroadcastMessageInstructionData = {
  discriminator: ReadonlyUint8Array;
  content: string;
  messageType: MessageType;
  replyTo: Option<Address>;
  nonce: bigint;
};

export type BroadcastMessageInstructionDataArgs = {
  content: string;
  messageType: MessageTypeArgs;
  replyTo: OptionOrNullable<Address>;
  nonce: number | bigint;
};

export function getBroadcastMessageInstructionDataEncoder(): Encoder<BroadcastMessageInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['content', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['messageType', getMessageTypeEncoder()],
      ['replyTo', getOptionEncoder(getAddressEncoder())],
      ['nonce', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: BROADCAST_MESSAGE_DISCRIMINATOR })
  );
}

export function getBroadcastMessageInstructionDataDecoder(): Decoder<BroadcastMessageInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['content', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['messageType', getMessageTypeDecoder()],
    ['replyTo', getOptionDecoder(getAddressDecoder())],
    ['nonce', getU64Decoder()],
  ]);
}

export function getBroadcastMessageInstructionDataCodec(): Codec<
  BroadcastMessageInstructionDataArgs,
  BroadcastMessageInstructionData
> {
  return combineCodec(
    getBroadcastMessageInstructionDataEncoder(),
    getBroadcastMessageInstructionDataDecoder()
  );
}

export type BroadcastMessageAsyncInput<
  TAccountChannelAccount extends string = string,
  TAccountParticipantAccount extends string = string,
  TAccountAgentAccount extends string = string,
  TAccountMessageAccount extends string = string,
  TAccountUser extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  channelAccount: Address<TAccountChannelAccount>;
  participantAccount?: Address<TAccountParticipantAccount>;
  agentAccount?: Address<TAccountAgentAccount>;
  messageAccount?: Address<TAccountMessageAccount>;
  user: TransactionSigner<TAccountUser>;
  systemProgram?: Address<TAccountSystemProgram>;
  content: BroadcastMessageInstructionDataArgs['content'];
  messageType: BroadcastMessageInstructionDataArgs['messageType'];
  replyTo: BroadcastMessageInstructionDataArgs['replyTo'];
  nonce: BroadcastMessageInstructionDataArgs['nonce'];
};

export async function getBroadcastMessageInstructionAsync<
  TAccountChannelAccount extends string,
  TAccountParticipantAccount extends string,
  TAccountAgentAccount extends string,
  TAccountMessageAccount extends string,
  TAccountUser extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: BroadcastMessageAsyncInput<
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountMessageAccount,
    TAccountUser,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  BroadcastMessageInstruction<
    TProgramAddress,
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountMessageAccount,
    TAccountUser,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    participantAccount: {
      value: input.participantAccount ?? null,
      isWritable: true,
    },
    agentAccount: { value: input.agentAccount ?? null, isWritable: false },
    messageAccount: { value: input.messageAccount ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.agentAccount.value) {
    accounts.agentAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.participantAccount.value) {
    accounts.participantAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.channelAccount.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.agentAccount.value)),
      ],
    });
  }
  if (!accounts.messageAccount.value) {
    accounts.messageAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            99, 104, 97, 110, 110, 101, 108, 95, 109, 101, 115, 115, 97, 103,
            101,
          ])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.channelAccount.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
        getU64Encoder().encode(expectSome(args.nonce)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.participantAccount),
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.messageAccount),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getBroadcastMessageInstructionDataEncoder().encode(
      args as BroadcastMessageInstructionDataArgs
    ),
  } as BroadcastMessageInstruction<
    TProgramAddress,
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountMessageAccount,
    TAccountUser,
    TAccountSystemProgram
  >;

  return instruction;
}

export type BroadcastMessageInput<
  TAccountChannelAccount extends string = string,
  TAccountParticipantAccount extends string = string,
  TAccountAgentAccount extends string = string,
  TAccountMessageAccount extends string = string,
  TAccountUser extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  channelAccount: Address<TAccountChannelAccount>;
  participantAccount: Address<TAccountParticipantAccount>;
  agentAccount: Address<TAccountAgentAccount>;
  messageAccount: Address<TAccountMessageAccount>;
  user: TransactionSigner<TAccountUser>;
  systemProgram?: Address<TAccountSystemProgram>;
  content: BroadcastMessageInstructionDataArgs['content'];
  messageType: BroadcastMessageInstructionDataArgs['messageType'];
  replyTo: BroadcastMessageInstructionDataArgs['replyTo'];
  nonce: BroadcastMessageInstructionDataArgs['nonce'];
};

export function getBroadcastMessageInstruction<
  TAccountChannelAccount extends string,
  TAccountParticipantAccount extends string,
  TAccountAgentAccount extends string,
  TAccountMessageAccount extends string,
  TAccountUser extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: BroadcastMessageInput<
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountMessageAccount,
    TAccountUser,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): BroadcastMessageInstruction<
  TProgramAddress,
  TAccountChannelAccount,
  TAccountParticipantAccount,
  TAccountAgentAccount,
  TAccountMessageAccount,
  TAccountUser,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    participantAccount: {
      value: input.participantAccount ?? null,
      isWritable: true,
    },
    agentAccount: { value: input.agentAccount ?? null, isWritable: false },
    messageAccount: { value: input.messageAccount ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.participantAccount),
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.messageAccount),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getBroadcastMessageInstructionDataEncoder().encode(
      args as BroadcastMessageInstructionDataArgs
    ),
  } as BroadcastMessageInstruction<
    TProgramAddress,
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountMessageAccount,
    TAccountUser,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedBroadcastMessageInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    channelAccount: TAccountMetas[0];
    participantAccount: TAccountMetas[1];
    agentAccount: TAccountMetas[2];
    messageAccount: TAccountMetas[3];
    user: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: BroadcastMessageInstructionData;
};

export function parseBroadcastMessageInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedBroadcastMessageInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    throw new Error('BroadcastMessage instruction: Insufficient accounts provided. Expected at least required accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      channelAccount: getNextAccount(),
      participantAccount: getNextAccount(),
      agentAccount: getNextAccount(),
      messageAccount: getNextAccount(),
      user: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getBroadcastMessageInstructionDataDecoder().decode(instruction.data),
  };
}
