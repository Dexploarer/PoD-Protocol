/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const AGENT_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  241, 119, 69, 140, 233, 9, 112, 50,
]);

export function getAgentAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    AGENT_ACCOUNT_DISCRIMINATOR
  );
}

export type AgentAccount = {
  discriminator: ReadonlyUint8Array;
  pubkey: Address;
  capabilities: bigint;
  reputation: bigint;
  lastUpdated: bigint;
  metadataUri: string;
  invitesSent: number;
  lastInviteAt: bigint;
  bump: number;
  reserved: Array<number>;
};

export type AgentAccountArgs = {
  pubkey: Address;
  capabilities: number | bigint;
  reputation: number | bigint;
  lastUpdated: number | bigint;
  metadataUri: string;
  invitesSent: number;
  lastInviteAt: number | bigint;
  bump: number;
  reserved: Array<number>;
};

export function getAgentAccountEncoder(): Encoder<AgentAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['pubkey', getAddressEncoder()],
      ['capabilities', getU64Encoder()],
      ['reputation', getU64Encoder()],
      ['lastUpdated', getI64Encoder()],
      ['metadataUri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['invitesSent', getU16Encoder()],
      ['lastInviteAt', getI64Encoder()],
      ['bump', getU8Encoder()],
      ['reserved', getArrayEncoder(getU8Encoder(), { size: 7 })],
    ]),
    (value) => ({ ...value, discriminator: AGENT_ACCOUNT_DISCRIMINATOR })
  );
}

export function getAgentAccountDecoder(): Decoder<AgentAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['pubkey', getAddressDecoder()],
    ['capabilities', getU64Decoder()],
    ['reputation', getU64Decoder()],
    ['lastUpdated', getI64Decoder()],
    ['metadataUri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['invitesSent', getU16Decoder()],
    ['lastInviteAt', getI64Decoder()],
    ['bump', getU8Decoder()],
    ['reserved', getArrayDecoder(getU8Decoder(), { size: 7 })],
  ]);
}

export function getAgentAccountCodec(): Codec<AgentAccountArgs, AgentAccount> {
  return combineCodec(getAgentAccountEncoder(), getAgentAccountDecoder());
}

export function decodeAgentAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<AgentAccount, TAddress>;
export function decodeAgentAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<AgentAccount, TAddress>;
export function decodeAgentAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<AgentAccount, TAddress> | MaybeAccount<AgentAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAgentAccountDecoder()
  );
}

export async function fetchAgentAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<AgentAccount, TAddress>> {
  const maybeAccount = await fetchMaybeAgentAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAgentAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<AgentAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAgentAccount(maybeAccount);
}

export async function fetchAllAgentAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<AgentAccount>[]> {
  const maybeAccounts = await fetchAllMaybeAgentAccount(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAgentAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<AgentAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeAgentAccount(maybeAccount));
}
