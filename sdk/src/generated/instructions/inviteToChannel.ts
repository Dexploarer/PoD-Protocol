/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INVITE_TO_CHANNEL_DISCRIMINATOR = new Uint8Array([
  203, 52, 194, 48, 173, 5, 43, 235,
]);

export function getInviteToChannelDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INVITE_TO_CHANNEL_DISCRIMINATOR
  );
}

export type InviteToChannelInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountChannelAccount extends string | IAccountMeta<string> = string,
  TAccountParticipantAccount extends string | IAccountMeta<string> = string,
  TAccountAgentAccount extends string | IAccountMeta<string> = string,
  TAccountInvitationAccount extends string | IAccountMeta<string> = string,
  TAccountInviter extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountChannelAccount extends string
        ? ReadonlyAccount<TAccountChannelAccount>
        : TAccountChannelAccount,
      TAccountParticipantAccount extends string
        ? ReadonlyAccount<TAccountParticipantAccount>
        : TAccountParticipantAccount,
      TAccountAgentAccount extends string
        ? ReadonlyAccount<TAccountAgentAccount>
        : TAccountAgentAccount,
      TAccountInvitationAccount extends string
        ? WritableAccount<TAccountInvitationAccount>
        : TAccountInvitationAccount,
      TAccountInviter extends string
        ? WritableSignerAccount<TAccountInviter> &
            IAccountSignerMeta<TAccountInviter>
        : TAccountInviter,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InviteToChannelInstructionData = {
  discriminator: ReadonlyUint8Array;
  invitee: Address;
  nonce: bigint;
};

export type InviteToChannelInstructionDataArgs = {
  invitee: Address;
  nonce: number | bigint;
};

export function getInviteToChannelInstructionDataEncoder(): Encoder<InviteToChannelInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['invitee', getAddressEncoder()],
      ['nonce', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INVITE_TO_CHANNEL_DISCRIMINATOR })
  );
}

export function getInviteToChannelInstructionDataDecoder(): Decoder<InviteToChannelInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['invitee', getAddressDecoder()],
    ['nonce', getU64Decoder()],
  ]);
}

export function getInviteToChannelInstructionDataCodec(): Codec<
  InviteToChannelInstructionDataArgs,
  InviteToChannelInstructionData
> {
  return combineCodec(
    getInviteToChannelInstructionDataEncoder(),
    getInviteToChannelInstructionDataDecoder()
  );
}

export type InviteToChannelAsyncInput<
  TAccountChannelAccount extends string = string,
  TAccountParticipantAccount extends string = string,
  TAccountAgentAccount extends string = string,
  TAccountInvitationAccount extends string = string,
  TAccountInviter extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  channelAccount: Address<TAccountChannelAccount>;
  participantAccount?: Address<TAccountParticipantAccount>;
  agentAccount?: Address<TAccountAgentAccount>;
  invitationAccount?: Address<TAccountInvitationAccount>;
  inviter: TransactionSigner<TAccountInviter>;
  systemProgram?: Address<TAccountSystemProgram>;
  invitee: InviteToChannelInstructionDataArgs['invitee'];
  nonce: InviteToChannelInstructionDataArgs['nonce'];
};

export async function getInviteToChannelInstructionAsync<
  TAccountChannelAccount extends string,
  TAccountParticipantAccount extends string,
  TAccountAgentAccount extends string,
  TAccountInvitationAccount extends string,
  TAccountInviter extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: InviteToChannelAsyncInput<
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountInvitationAccount,
    TAccountInviter,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InviteToChannelInstruction<
    TProgramAddress,
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountInvitationAccount,
    TAccountInviter,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: false },
    participantAccount: {
      value: input.participantAccount ?? null,
      isWritable: false,
    },
    agentAccount: { value: input.agentAccount ?? null, isWritable: false },
    invitationAccount: {
      value: input.invitationAccount ?? null,
      isWritable: true,
    },
    inviter: { value: input.inviter ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.agentAccount.value) {
    accounts.agentAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.inviter.value)),
      ],
    });
  }
  if (!accounts.participantAccount.value) {
    accounts.participantAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.channelAccount.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.agentAccount.value)),
      ],
    });
  }
  if (!accounts.invitationAccount.value) {
    accounts.invitationAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([105, 110, 118, 105, 116, 97, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.channelAccount.value)
        ),
        getAddressEncoder().encode(expectSome(args.invitee)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.participantAccount),
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.invitationAccount),
      getAccountMeta(accounts.inviter),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInviteToChannelInstructionDataEncoder().encode(
      args as InviteToChannelInstructionDataArgs
    ),
  } as InviteToChannelInstruction<
    TProgramAddress,
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountInvitationAccount,
    TAccountInviter,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InviteToChannelInput<
  TAccountChannelAccount extends string = string,
  TAccountParticipantAccount extends string = string,
  TAccountAgentAccount extends string = string,
  TAccountInvitationAccount extends string = string,
  TAccountInviter extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  channelAccount: Address<TAccountChannelAccount>;
  participantAccount?: Address<TAccountParticipantAccount>;
  agentAccount: Address<TAccountAgentAccount>;
  invitationAccount: Address<TAccountInvitationAccount>;
  inviter: TransactionSigner<TAccountInviter>;
  systemProgram?: Address<TAccountSystemProgram>;
  invitee: InviteToChannelInstructionDataArgs['invitee'];
  nonce: InviteToChannelInstructionDataArgs['nonce'];
};

export function getInviteToChannelInstruction<
  TAccountChannelAccount extends string,
  TAccountParticipantAccount extends string,
  TAccountAgentAccount extends string,
  TAccountInvitationAccount extends string,
  TAccountInviter extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: InviteToChannelInput<
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountInvitationAccount,
    TAccountInviter,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InviteToChannelInstruction<
  TProgramAddress,
  TAccountChannelAccount,
  TAccountParticipantAccount,
  TAccountAgentAccount,
  TAccountInvitationAccount,
  TAccountInviter,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: false },
    participantAccount: {
      value: input.participantAccount ?? null,
      isWritable: false,
    },
    agentAccount: { value: input.agentAccount ?? null, isWritable: false },
    invitationAccount: {
      value: input.invitationAccount ?? null,
      isWritable: true,
    },
    inviter: { value: input.inviter ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.participantAccount),
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.invitationAccount),
      getAccountMeta(accounts.inviter),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInviteToChannelInstructionDataEncoder().encode(
      args as InviteToChannelInstructionDataArgs
    ),
  } as InviteToChannelInstruction<
    TProgramAddress,
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountInvitationAccount,
    TAccountInviter,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInviteToChannelInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    channelAccount: TAccountMetas[0];
    participantAccount?: TAccountMetas[1] | undefined;
    agentAccount: TAccountMetas[2];
    invitationAccount: TAccountMetas[3];
    inviter: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: InviteToChannelInstructionData;
};

export function parseInviteToChannelInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInviteToChannelInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === POD_COM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      channelAccount: getNextAccount(),
      participantAccount: getNextOptionalAccount(),
      agentAccount: getNextAccount(),
      invitationAccount: getNextAccount(),
      inviter: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInviteToChannelInstructionDataDecoder().decode(instruction.data),
  };
}
