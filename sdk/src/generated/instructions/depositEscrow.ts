/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const DEPOSIT_ESCROW_DISCRIMINATOR = new Uint8Array([
  226, 112, 158, 176, 178, 118, 153, 128,
]);

export function getDepositEscrowDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEPOSIT_ESCROW_DISCRIMINATOR
  );
}

export type DepositEscrowInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountEscrowAccount extends string | IAccountMeta<string> = string,
  TAccountChannelAccount extends string | IAccountMeta<string> = string,
  TAccountDepositor extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountEscrowAccount extends string
        ? WritableAccount<TAccountEscrowAccount>
        : TAccountEscrowAccount,
      TAccountChannelAccount extends string
        ? WritableAccount<TAccountChannelAccount>
        : TAccountChannelAccount,
      TAccountDepositor extends string
        ? WritableSignerAccount<TAccountDepositor> &
            IAccountSignerMeta<TAccountDepositor>
        : TAccountDepositor,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DepositEscrowInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type DepositEscrowInstructionDataArgs = { amount: number | bigint };

export function getDepositEscrowInstructionDataEncoder(): Encoder<DepositEscrowInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: DEPOSIT_ESCROW_DISCRIMINATOR })
  );
}

export function getDepositEscrowInstructionDataDecoder(): Decoder<DepositEscrowInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getDepositEscrowInstructionDataCodec(): Codec<
  DepositEscrowInstructionDataArgs,
  DepositEscrowInstructionData
> {
  return combineCodec(
    getDepositEscrowInstructionDataEncoder(),
    getDepositEscrowInstructionDataDecoder()
  );
}

export type DepositEscrowAsyncInput<
  TAccountEscrowAccount extends string = string,
  TAccountChannelAccount extends string = string,
  TAccountDepositor extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  escrowAccount?: Address<TAccountEscrowAccount>;
  channelAccount: Address<TAccountChannelAccount>;
  depositor: TransactionSigner<TAccountDepositor>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: DepositEscrowInstructionDataArgs['amount'];
};

export async function getDepositEscrowInstructionAsync<
  TAccountEscrowAccount extends string,
  TAccountChannelAccount extends string,
  TAccountDepositor extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: DepositEscrowAsyncInput<
    TAccountEscrowAccount,
    TAccountChannelAccount,
    TAccountDepositor,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  DepositEscrowInstruction<
    TProgramAddress,
    TAccountEscrowAccount,
    TAccountChannelAccount,
    TAccountDepositor,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    escrowAccount: { value: input.escrowAccount ?? null, isWritable: true },
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    depositor: { value: input.depositor ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.escrowAccount.value) {
    accounts.escrowAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([101, 115, 99, 114, 111, 119])),
        getAddressEncoder().encode(
          expectAddress(accounts.channelAccount.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.depositor.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrowAccount),
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.depositor),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDepositEscrowInstructionDataEncoder().encode(
      args as DepositEscrowInstructionDataArgs
    ),
  } as DepositEscrowInstruction<
    TProgramAddress,
    TAccountEscrowAccount,
    TAccountChannelAccount,
    TAccountDepositor,
    TAccountSystemProgram
  >;

  return instruction;
}

export type DepositEscrowInput<
  TAccountEscrowAccount extends string = string,
  TAccountChannelAccount extends string = string,
  TAccountDepositor extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  escrowAccount: Address<TAccountEscrowAccount>;
  channelAccount: Address<TAccountChannelAccount>;
  depositor: TransactionSigner<TAccountDepositor>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: DepositEscrowInstructionDataArgs['amount'];
};

export function getDepositEscrowInstruction<
  TAccountEscrowAccount extends string,
  TAccountChannelAccount extends string,
  TAccountDepositor extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: DepositEscrowInput<
    TAccountEscrowAccount,
    TAccountChannelAccount,
    TAccountDepositor,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DepositEscrowInstruction<
  TProgramAddress,
  TAccountEscrowAccount,
  TAccountChannelAccount,
  TAccountDepositor,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    escrowAccount: { value: input.escrowAccount ?? null, isWritable: true },
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    depositor: { value: input.depositor ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrowAccount),
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.depositor),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDepositEscrowInstructionDataEncoder().encode(
      args as DepositEscrowInstructionDataArgs
    ),
  } as DepositEscrowInstruction<
    TProgramAddress,
    TAccountEscrowAccount,
    TAccountChannelAccount,
    TAccountDepositor,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedDepositEscrowInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    escrowAccount: TAccountMetas[0];
    channelAccount: TAccountMetas[1];
    depositor: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: DepositEscrowInstructionData;
};

export function parseDepositEscrowInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDepositEscrowInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      escrowAccount: getNextAccount(),
      channelAccount: getNextAccount(),
      depositor: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getDepositEscrowInstructionDataDecoder().decode(instruction.data),
  };
}
