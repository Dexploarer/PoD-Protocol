/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const LEAVE_CHANNEL_DISCRIMINATOR = new Uint8Array([
  104, 0, 75, 134, 95, 80, 68, 186,
]);

export function getLeaveChannelDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    LEAVE_CHANNEL_DISCRIMINATOR
  );
}

export type LeaveChannelInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountChannelAccount extends string | IAccountMeta<string> = string,
  TAccountParticipantAccount extends string | IAccountMeta<string> = string,
  TAccountAgentAccount extends string | IAccountMeta<string> = string,
  TAccountUser extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountChannelAccount extends string
        ? WritableAccount<TAccountChannelAccount>
        : TAccountChannelAccount,
      TAccountParticipantAccount extends string
        ? WritableAccount<TAccountParticipantAccount>
        : TAccountParticipantAccount,
      TAccountAgentAccount extends string
        ? ReadonlyAccount<TAccountAgentAccount>
        : TAccountAgentAccount,
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      ...TRemainingAccounts,
    ]
  >;

export type LeaveChannelInstructionData = { discriminator: ReadonlyUint8Array };

export type LeaveChannelInstructionDataArgs = {};

export function getLeaveChannelInstructionDataEncoder(): Encoder<LeaveChannelInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: LEAVE_CHANNEL_DISCRIMINATOR })
  );
}

export function getLeaveChannelInstructionDataDecoder(): Decoder<LeaveChannelInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getLeaveChannelInstructionDataCodec(): Codec<
  LeaveChannelInstructionDataArgs,
  LeaveChannelInstructionData
> {
  return combineCodec(
    getLeaveChannelInstructionDataEncoder(),
    getLeaveChannelInstructionDataDecoder()
  );
}

export type LeaveChannelAsyncInput<
  TAccountChannelAccount extends string = string,
  TAccountParticipantAccount extends string = string,
  TAccountAgentAccount extends string = string,
  TAccountUser extends string = string,
> = {
  channelAccount: Address<TAccountChannelAccount>;
  participantAccount?: Address<TAccountParticipantAccount>;
  agentAccount?: Address<TAccountAgentAccount>;
  user: TransactionSigner<TAccountUser>;
};

export async function getLeaveChannelInstructionAsync<
  TAccountChannelAccount extends string,
  TAccountParticipantAccount extends string,
  TAccountAgentAccount extends string,
  TAccountUser extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: LeaveChannelAsyncInput<
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountUser
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  LeaveChannelInstruction<
    TProgramAddress,
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountUser
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    participantAccount: {
      value: input.participantAccount ?? null,
      isWritable: true,
    },
    agentAccount: { value: input.agentAccount ?? null, isWritable: false },
    user: { value: input.user ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.agentAccount.value) {
    accounts.agentAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.participantAccount.value) {
    accounts.participantAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.channelAccount.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.agentAccount.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.participantAccount),
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.user),
    ],
    programAddress,
    data: getLeaveChannelInstructionDataEncoder().encode({}),
  } as LeaveChannelInstruction<
    TProgramAddress,
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountUser
  >;

  return instruction;
}

export type LeaveChannelInput<
  TAccountChannelAccount extends string = string,
  TAccountParticipantAccount extends string = string,
  TAccountAgentAccount extends string = string,
  TAccountUser extends string = string,
> = {
  channelAccount: Address<TAccountChannelAccount>;
  participantAccount: Address<TAccountParticipantAccount>;
  agentAccount: Address<TAccountAgentAccount>;
  user: TransactionSigner<TAccountUser>;
};

export function getLeaveChannelInstruction<
  TAccountChannelAccount extends string,
  TAccountParticipantAccount extends string,
  TAccountAgentAccount extends string,
  TAccountUser extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: LeaveChannelInput<
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountUser
  >,
  config?: { programAddress?: TProgramAddress }
): LeaveChannelInstruction<
  TProgramAddress,
  TAccountChannelAccount,
  TAccountParticipantAccount,
  TAccountAgentAccount,
  TAccountUser
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    participantAccount: {
      value: input.participantAccount ?? null,
      isWritable: true,
    },
    agentAccount: { value: input.agentAccount ?? null, isWritable: false },
    user: { value: input.user ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.participantAccount),
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.user),
    ],
    programAddress,
    data: getLeaveChannelInstructionDataEncoder().encode({}),
  } as LeaveChannelInstruction<
    TProgramAddress,
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountUser
  >;

  return instruction;
}

export type ParsedLeaveChannelInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    channelAccount: TAccountMetas[0];
    participantAccount: TAccountMetas[1];
    agentAccount: TAccountMetas[2];
    user: TAccountMetas[3];
  };
  data: LeaveChannelInstructionData;
};

export function parseLeaveChannelInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedLeaveChannelInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      channelAccount: getNextAccount(),
      participantAccount: getNextAccount(),
      agentAccount: getNextAccount(),
      user: getNextAccount(),
    },
    data: getLeaveChannelInstructionDataDecoder().decode(instruction.data),
  };
}
