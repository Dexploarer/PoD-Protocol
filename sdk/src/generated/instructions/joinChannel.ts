/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const JOIN_CHANNEL_DISCRIMINATOR = new Uint8Array([
  124, 39, 115, 89, 217, 26, 38, 29,
]);

export function getJoinChannelDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    JOIN_CHANNEL_DISCRIMINATOR
  );
}

export type JoinChannelInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountChannelAccount extends string | IAccountMeta<string> = string,
  TAccountParticipantAccount extends string | IAccountMeta<string> = string,
  TAccountAgentAccount extends string | IAccountMeta<string> = string,
  TAccountInvitationAccount extends string | IAccountMeta<string> = string,
  TAccountEscrowAccount extends string | IAccountMeta<string> = string,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountChannelAccount extends string
        ? WritableAccount<TAccountChannelAccount>
        : TAccountChannelAccount,
      TAccountParticipantAccount extends string
        ? WritableAccount<TAccountParticipantAccount>
        : TAccountParticipantAccount,
      TAccountAgentAccount extends string
        ? ReadonlyAccount<TAccountAgentAccount>
        : TAccountAgentAccount,
      TAccountInvitationAccount extends string
        ? WritableAccount<TAccountInvitationAccount>
        : TAccountInvitationAccount,
      TAccountEscrowAccount extends string
        ? WritableAccount<TAccountEscrowAccount>
        : TAccountEscrowAccount,
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type JoinChannelInstructionData = { discriminator: ReadonlyUint8Array };

export type JoinChannelInstructionDataArgs = {};

export function getJoinChannelInstructionDataEncoder(): Encoder<JoinChannelInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: JOIN_CHANNEL_DISCRIMINATOR })
  );
}

export function getJoinChannelInstructionDataDecoder(): Decoder<JoinChannelInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getJoinChannelInstructionDataCodec(): Codec<
  JoinChannelInstructionDataArgs,
  JoinChannelInstructionData
> {
  return combineCodec(
    getJoinChannelInstructionDataEncoder(),
    getJoinChannelInstructionDataDecoder()
  );
}

export type JoinChannelAsyncInput<
  TAccountChannelAccount extends string = string,
  TAccountParticipantAccount extends string = string,
  TAccountAgentAccount extends string = string,
  TAccountInvitationAccount extends string = string,
  TAccountEscrowAccount extends string = string,
  TAccountUser extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  channelAccount: Address<TAccountChannelAccount>;
  participantAccount?: Address<TAccountParticipantAccount>;
  agentAccount?: Address<TAccountAgentAccount>;
  invitationAccount?: Address<TAccountInvitationAccount>;
  escrowAccount?: Address<TAccountEscrowAccount>;
  user: TransactionSigner<TAccountUser>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getJoinChannelInstructionAsync<
  TAccountChannelAccount extends string,
  TAccountParticipantAccount extends string,
  TAccountAgentAccount extends string,
  TAccountInvitationAccount extends string,
  TAccountEscrowAccount extends string,
  TAccountUser extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: JoinChannelAsyncInput<
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountInvitationAccount,
    TAccountEscrowAccount,
    TAccountUser,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  JoinChannelInstruction<
    TProgramAddress,
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountInvitationAccount,
    TAccountEscrowAccount,
    TAccountUser,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    participantAccount: {
      value: input.participantAccount ?? null,
      isWritable: true,
    },
    agentAccount: { value: input.agentAccount ?? null, isWritable: false },
    invitationAccount: {
      value: input.invitationAccount ?? null,
      isWritable: true,
    },
    escrowAccount: { value: input.escrowAccount ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.agentAccount.value) {
    accounts.agentAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.participantAccount.value) {
    accounts.participantAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.channelAccount.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.agentAccount.value)),
      ],
    });
  }
  if (!accounts.invitationAccount.value) {
    accounts.invitationAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([105, 110, 118, 105, 116, 97, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.channelAccount.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.escrowAccount.value) {
    accounts.escrowAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([101, 115, 99, 114, 111, 119])),
        getAddressEncoder().encode(
          expectAddress(accounts.channelAccount.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.participantAccount),
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.invitationAccount),
      getAccountMeta(accounts.escrowAccount),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getJoinChannelInstructionDataEncoder().encode({}),
  } as JoinChannelInstruction<
    TProgramAddress,
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountInvitationAccount,
    TAccountEscrowAccount,
    TAccountUser,
    TAccountSystemProgram
  >;

  return instruction;
}

export type JoinChannelInput<
  TAccountChannelAccount extends string = string,
  TAccountParticipantAccount extends string = string,
  TAccountAgentAccount extends string = string,
  TAccountInvitationAccount extends string = string,
  TAccountEscrowAccount extends string = string,
  TAccountUser extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  channelAccount: Address<TAccountChannelAccount>;
  participantAccount: Address<TAccountParticipantAccount>;
  agentAccount: Address<TAccountAgentAccount>;
  invitationAccount?: Address<TAccountInvitationAccount>;
  escrowAccount?: Address<TAccountEscrowAccount>;
  user: TransactionSigner<TAccountUser>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getJoinChannelInstruction<
  TAccountChannelAccount extends string,
  TAccountParticipantAccount extends string,
  TAccountAgentAccount extends string,
  TAccountInvitationAccount extends string,
  TAccountEscrowAccount extends string,
  TAccountUser extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: JoinChannelInput<
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountInvitationAccount,
    TAccountEscrowAccount,
    TAccountUser,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): JoinChannelInstruction<
  TProgramAddress,
  TAccountChannelAccount,
  TAccountParticipantAccount,
  TAccountAgentAccount,
  TAccountInvitationAccount,
  TAccountEscrowAccount,
  TAccountUser,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    participantAccount: {
      value: input.participantAccount ?? null,
      isWritable: true,
    },
    agentAccount: { value: input.agentAccount ?? null, isWritable: false },
    invitationAccount: {
      value: input.invitationAccount ?? null,
      isWritable: true,
    },
    escrowAccount: { value: input.escrowAccount ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.participantAccount),
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.invitationAccount),
      getAccountMeta(accounts.escrowAccount),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getJoinChannelInstructionDataEncoder().encode({}),
  } as JoinChannelInstruction<
    TProgramAddress,
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountAgentAccount,
    TAccountInvitationAccount,
    TAccountEscrowAccount,
    TAccountUser,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedJoinChannelInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    channelAccount: TAccountMetas[0];
    participantAccount: TAccountMetas[1];
    agentAccount: TAccountMetas[2];
    invitationAccount?: TAccountMetas[3] | undefined;
    escrowAccount?: TAccountMetas[4] | undefined;
    user: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: JoinChannelInstructionData;
};

export function parseJoinChannelInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedJoinChannelInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === POD_COM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      channelAccount: getNextAccount(),
      participantAccount: getNextAccount(),
      agentAccount: getNextAccount(),
      invitationAccount: getNextOptionalAccount(),
      escrowAccount: getNextOptionalAccount(),
      user: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getJoinChannelInstructionDataDecoder().decode(instruction.data),
  };
}
