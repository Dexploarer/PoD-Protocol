/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getMessageTypeDecoder,
  getMessageTypeEncoder,
  type MessageType,
  type MessageTypeArgs,
} from '../types';

export const BROADCAST_MESSAGE_COMPRESSED_DISCRIMINATOR = new Uint8Array([
  15, 17, 113, 35, 186, 246, 41, 108,
]);

export function getBroadcastMessageCompressedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BROADCAST_MESSAGE_COMPRESSED_DISCRIMINATOR
  );
}

export type BroadcastMessageCompressedInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountChannelAccount extends string | IAccountMeta<string> = string,
  TAccountParticipantAccount extends string | IAccountMeta<string> = string,
  TAccountFeePayer extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountCompressionProgram extends
    | string
    | IAccountMeta<string> = 'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK',
  TAccountRegisteredProgramId extends string | IAccountMeta<string> = string,
  TAccountNoopProgram extends string | IAccountMeta<string> = string,
  TAccountAccountCompressionAuthority extends
    | string
    | IAccountMeta<string> = string,
  TAccountAccountCompressionProgram extends
    | string
    | IAccountMeta<string> = string,
  TAccountMerkleTree extends string | IAccountMeta<string> = string,
  TAccountNullifierQueue extends string | IAccountMeta<string> = string,
  TAccountCpiAuthorityPda extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountChannelAccount extends string
        ? ReadonlyAccount<TAccountChannelAccount>
        : TAccountChannelAccount,
      TAccountParticipantAccount extends string
        ? WritableAccount<TAccountParticipantAccount>
        : TAccountParticipantAccount,
      TAccountFeePayer extends string
        ? WritableSignerAccount<TAccountFeePayer> &
            IAccountSignerMeta<TAccountFeePayer>
        : TAccountFeePayer,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountCompressionProgram extends string
        ? ReadonlyAccount<TAccountCompressionProgram>
        : TAccountCompressionProgram,
      TAccountRegisteredProgramId extends string
        ? ReadonlyAccount<TAccountRegisteredProgramId>
        : TAccountRegisteredProgramId,
      TAccountNoopProgram extends string
        ? ReadonlyAccount<TAccountNoopProgram>
        : TAccountNoopProgram,
      TAccountAccountCompressionAuthority extends string
        ? ReadonlyAccount<TAccountAccountCompressionAuthority>
        : TAccountAccountCompressionAuthority,
      TAccountAccountCompressionProgram extends string
        ? ReadonlyAccount<TAccountAccountCompressionProgram>
        : TAccountAccountCompressionProgram,
      TAccountMerkleTree extends string
        ? ReadonlyAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountNullifierQueue extends string
        ? ReadonlyAccount<TAccountNullifierQueue>
        : TAccountNullifierQueue,
      TAccountCpiAuthorityPda extends string
        ? ReadonlyAccount<TAccountCpiAuthorityPda>
        : TAccountCpiAuthorityPda,
      ...TRemainingAccounts,
    ]
  >;

export type BroadcastMessageCompressedInstructionData = {
  discriminator: ReadonlyUint8Array;
  content: string;
  messageType: MessageType;
  replyTo: Option<Address>;
  ipfsHash: string;
};

export type BroadcastMessageCompressedInstructionDataArgs = {
  content: string;
  messageType: MessageTypeArgs;
  replyTo: OptionOrNullable<Address>;
  ipfsHash: string;
};

export function getBroadcastMessageCompressedInstructionDataEncoder(): Encoder<BroadcastMessageCompressedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['content', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['messageType', getMessageTypeEncoder()],
      ['replyTo', getOptionEncoder(getAddressEncoder())],
      ['ipfsHash', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: BROADCAST_MESSAGE_COMPRESSED_DISCRIMINATOR,
    })
  );
}

export function getBroadcastMessageCompressedInstructionDataDecoder(): Decoder<BroadcastMessageCompressedInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['content', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['messageType', getMessageTypeDecoder()],
    ['replyTo', getOptionDecoder(getAddressDecoder())],
    ['ipfsHash', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getBroadcastMessageCompressedInstructionDataCodec(): Codec<
  BroadcastMessageCompressedInstructionDataArgs,
  BroadcastMessageCompressedInstructionData
> {
  return combineCodec(
    getBroadcastMessageCompressedInstructionDataEncoder(),
    getBroadcastMessageCompressedInstructionDataDecoder()
  );
}

export type BroadcastMessageCompressedInput<
  TAccountChannelAccount extends string = string,
  TAccountParticipantAccount extends string = string,
  TAccountFeePayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountRegisteredProgramId extends string = string,
  TAccountNoopProgram extends string = string,
  TAccountAccountCompressionAuthority extends string = string,
  TAccountAccountCompressionProgram extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountNullifierQueue extends string = string,
  TAccountCpiAuthorityPda extends string = string,
> = {
  channelAccount: Address<TAccountChannelAccount>;
  participantAccount: Address<TAccountParticipantAccount>;
  feePayer: TransactionSigner<TAccountFeePayer>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  registeredProgramId: Address<TAccountRegisteredProgramId>;
  noopProgram: Address<TAccountNoopProgram>;
  accountCompressionAuthority: Address<TAccountAccountCompressionAuthority>;
  accountCompressionProgram: Address<TAccountAccountCompressionProgram>;
  merkleTree: Address<TAccountMerkleTree>;
  nullifierQueue: Address<TAccountNullifierQueue>;
  cpiAuthorityPda: Address<TAccountCpiAuthorityPda>;
  content: BroadcastMessageCompressedInstructionDataArgs['content'];
  messageType: BroadcastMessageCompressedInstructionDataArgs['messageType'];
  replyTo: BroadcastMessageCompressedInstructionDataArgs['replyTo'];
  ipfsHash: BroadcastMessageCompressedInstructionDataArgs['ipfsHash'];
};

export function getBroadcastMessageCompressedInstruction<
  TAccountChannelAccount extends string,
  TAccountParticipantAccount extends string,
  TAccountFeePayer extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountCompressionProgram extends string,
  TAccountRegisteredProgramId extends string,
  TAccountNoopProgram extends string,
  TAccountAccountCompressionAuthority extends string,
  TAccountAccountCompressionProgram extends string,
  TAccountMerkleTree extends string,
  TAccountNullifierQueue extends string,
  TAccountCpiAuthorityPda extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: BroadcastMessageCompressedInput<
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountFeePayer,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountCompressionProgram,
    TAccountRegisteredProgramId,
    TAccountNoopProgram,
    TAccountAccountCompressionAuthority,
    TAccountAccountCompressionProgram,
    TAccountMerkleTree,
    TAccountNullifierQueue,
    TAccountCpiAuthorityPda
  >,
  config?: { programAddress?: TProgramAddress }
): BroadcastMessageCompressedInstruction<
  TProgramAddress,
  TAccountChannelAccount,
  TAccountParticipantAccount,
  TAccountFeePayer,
  TAccountAuthority,
  TAccountSystemProgram,
  TAccountCompressionProgram,
  TAccountRegisteredProgramId,
  TAccountNoopProgram,
  TAccountAccountCompressionAuthority,
  TAccountAccountCompressionProgram,
  TAccountMerkleTree,
  TAccountNullifierQueue,
  TAccountCpiAuthorityPda
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: false },
    participantAccount: {
      value: input.participantAccount ?? null,
      isWritable: true,
    },
    feePayer: { value: input.feePayer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    registeredProgramId: {
      value: input.registeredProgramId ?? null,
      isWritable: false,
    },
    noopProgram: { value: input.noopProgram ?? null, isWritable: false },
    accountCompressionAuthority: {
      value: input.accountCompressionAuthority ?? null,
      isWritable: false,
    },
    accountCompressionProgram: {
      value: input.accountCompressionProgram ?? null,
      isWritable: false,
    },
    merkleTree: { value: input.merkleTree ?? null, isWritable: false },
    nullifierQueue: { value: input.nullifierQueue ?? null, isWritable: false },
    cpiAuthorityPda: {
      value: input.cpiAuthorityPda ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK' as Address<'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.participantAccount),
      getAccountMeta(accounts.feePayer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.registeredProgramId),
      getAccountMeta(accounts.noopProgram),
      getAccountMeta(accounts.accountCompressionAuthority),
      getAccountMeta(accounts.accountCompressionProgram),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.nullifierQueue),
      getAccountMeta(accounts.cpiAuthorityPda),
    ],
    programAddress,
    data: getBroadcastMessageCompressedInstructionDataEncoder().encode(
      args as BroadcastMessageCompressedInstructionDataArgs
    ),
  } as BroadcastMessageCompressedInstruction<
    TProgramAddress,
    TAccountChannelAccount,
    TAccountParticipantAccount,
    TAccountFeePayer,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountCompressionProgram,
    TAccountRegisteredProgramId,
    TAccountNoopProgram,
    TAccountAccountCompressionAuthority,
    TAccountAccountCompressionProgram,
    TAccountMerkleTree,
    TAccountNullifierQueue,
    TAccountCpiAuthorityPda
  >;

  return instruction;
}

export type ParsedBroadcastMessageCompressedInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    channelAccount: TAccountMetas[0];
    participantAccount: TAccountMetas[1];
    feePayer: TAccountMetas[2];
    authority: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
    compressionProgram: TAccountMetas[5];
    registeredProgramId: TAccountMetas[6];
    noopProgram: TAccountMetas[7];
    accountCompressionAuthority: TAccountMetas[8];
    accountCompressionProgram: TAccountMetas[9];
    merkleTree: TAccountMetas[10];
    nullifierQueue: TAccountMetas[11];
    cpiAuthorityPda: TAccountMetas[12];
  };
  data: BroadcastMessageCompressedInstructionData;
};

export function parseBroadcastMessageCompressedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedBroadcastMessageCompressedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      channelAccount: getNextAccount(),
      participantAccount: getNextAccount(),
      feePayer: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
      compressionProgram: getNextAccount(),
      registeredProgramId: getNextAccount(),
      noopProgram: getNextAccount(),
      accountCompressionAuthority: getNextAccount(),
      accountCompressionProgram: getNextAccount(),
      merkleTree: getNextAccount(),
      nullifierQueue: getNextAccount(),
      cpiAuthorityPda: getNextAccount(),
    },
    data: getBroadcastMessageCompressedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
