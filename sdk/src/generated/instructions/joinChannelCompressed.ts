/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const JOIN_CHANNEL_COMPRESSED_DISCRIMINATOR = new Uint8Array([
  167, 194, 203, 130, 133, 162, 10, 88,
]);

export function getJoinChannelCompressedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    JOIN_CHANNEL_COMPRESSED_DISCRIMINATOR
  );
}

export type JoinChannelCompressedInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountChannelAccount extends string | IAccountMeta<string> = string,
  TAccountAgentAccount extends string | IAccountMeta<string> = string,
  TAccountInvitationAccount extends string | IAccountMeta<string> = string,
  TAccountFeePayer extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountRegisteredProgramId extends string | IAccountMeta<string> = string,
  TAccountNoopProgram extends string | IAccountMeta<string> = string,
  TAccountAccountCompressionAuthority extends
    | string
    | IAccountMeta<string> = string,
  TAccountAccountCompressionProgram extends
    | string
    | IAccountMeta<string> = string,
  TAccountMerkleTree extends string | IAccountMeta<string> = string,
  TAccountNullifierQueue extends string | IAccountMeta<string> = string,
  TAccountCpiAuthorityPda extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountChannelAccount extends string
        ? WritableAccount<TAccountChannelAccount>
        : TAccountChannelAccount,
      TAccountAgentAccount extends string
        ? ReadonlyAccount<TAccountAgentAccount>
        : TAccountAgentAccount,
      TAccountInvitationAccount extends string
        ? ReadonlyAccount<TAccountInvitationAccount>
        : TAccountInvitationAccount,
      TAccountFeePayer extends string
        ? WritableSignerAccount<TAccountFeePayer> &
            IAccountSignerMeta<TAccountFeePayer>
        : TAccountFeePayer,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRegisteredProgramId extends string
        ? ReadonlyAccount<TAccountRegisteredProgramId>
        : TAccountRegisteredProgramId,
      TAccountNoopProgram extends string
        ? ReadonlyAccount<TAccountNoopProgram>
        : TAccountNoopProgram,
      TAccountAccountCompressionAuthority extends string
        ? ReadonlyAccount<TAccountAccountCompressionAuthority>
        : TAccountAccountCompressionAuthority,
      TAccountAccountCompressionProgram extends string
        ? ReadonlyAccount<TAccountAccountCompressionProgram>
        : TAccountAccountCompressionProgram,
      TAccountMerkleTree extends string
        ? ReadonlyAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountNullifierQueue extends string
        ? ReadonlyAccount<TAccountNullifierQueue>
        : TAccountNullifierQueue,
      TAccountCpiAuthorityPda extends string
        ? ReadonlyAccount<TAccountCpiAuthorityPda>
        : TAccountCpiAuthorityPda,
      ...TRemainingAccounts,
    ]
  >;

export type JoinChannelCompressedInstructionData = {
  discriminator: ReadonlyUint8Array;
  metadataHash: Array<number>;
};

export type JoinChannelCompressedInstructionDataArgs = {
  metadataHash: Array<number>;
};

export function getJoinChannelCompressedInstructionDataEncoder(): Encoder<JoinChannelCompressedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['metadataHash', getArrayEncoder(getU8Encoder(), { size: 32 })],
    ]),
    (value) => ({
      ...value,
      discriminator: JOIN_CHANNEL_COMPRESSED_DISCRIMINATOR,
    })
  );
}

export function getJoinChannelCompressedInstructionDataDecoder(): Decoder<JoinChannelCompressedInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['metadataHash', getArrayDecoder(getU8Decoder(), { size: 32 })],
  ]);
}

export function getJoinChannelCompressedInstructionDataCodec(): Codec<
  JoinChannelCompressedInstructionDataArgs,
  JoinChannelCompressedInstructionData
> {
  return combineCodec(
    getJoinChannelCompressedInstructionDataEncoder(),
    getJoinChannelCompressedInstructionDataDecoder()
  );
}

export type JoinChannelCompressedInput<
  TAccountChannelAccount extends string = string,
  TAccountAgentAccount extends string = string,
  TAccountInvitationAccount extends string = string,
  TAccountFeePayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRegisteredProgramId extends string = string,
  TAccountNoopProgram extends string = string,
  TAccountAccountCompressionAuthority extends string = string,
  TAccountAccountCompressionProgram extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountNullifierQueue extends string = string,
  TAccountCpiAuthorityPda extends string = string,
> = {
  channelAccount: Address<TAccountChannelAccount>;
  agentAccount: Address<TAccountAgentAccount>;
  invitationAccount?: Address<TAccountInvitationAccount>;
  feePayer: TransactionSigner<TAccountFeePayer>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  registeredProgramId: Address<TAccountRegisteredProgramId>;
  noopProgram: Address<TAccountNoopProgram>;
  accountCompressionAuthority: Address<TAccountAccountCompressionAuthority>;
  accountCompressionProgram: Address<TAccountAccountCompressionProgram>;
  merkleTree: Address<TAccountMerkleTree>;
  nullifierQueue: Address<TAccountNullifierQueue>;
  cpiAuthorityPda: Address<TAccountCpiAuthorityPda>;
  metadataHash: JoinChannelCompressedInstructionDataArgs['metadataHash'];
};

export function getJoinChannelCompressedInstruction<
  TAccountChannelAccount extends string,
  TAccountAgentAccount extends string,
  TAccountInvitationAccount extends string,
  TAccountFeePayer extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountRegisteredProgramId extends string,
  TAccountNoopProgram extends string,
  TAccountAccountCompressionAuthority extends string,
  TAccountAccountCompressionProgram extends string,
  TAccountMerkleTree extends string,
  TAccountNullifierQueue extends string,
  TAccountCpiAuthorityPda extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: JoinChannelCompressedInput<
    TAccountChannelAccount,
    TAccountAgentAccount,
    TAccountInvitationAccount,
    TAccountFeePayer,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountRegisteredProgramId,
    TAccountNoopProgram,
    TAccountAccountCompressionAuthority,
    TAccountAccountCompressionProgram,
    TAccountMerkleTree,
    TAccountNullifierQueue,
    TAccountCpiAuthorityPda
  >,
  config?: { programAddress?: TProgramAddress }
): JoinChannelCompressedInstruction<
  TProgramAddress,
  TAccountChannelAccount,
  TAccountAgentAccount,
  TAccountInvitationAccount,
  TAccountFeePayer,
  TAccountAuthority,
  TAccountSystemProgram,
  TAccountRegisteredProgramId,
  TAccountNoopProgram,
  TAccountAccountCompressionAuthority,
  TAccountAccountCompressionProgram,
  TAccountMerkleTree,
  TAccountNullifierQueue,
  TAccountCpiAuthorityPda
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    agentAccount: { value: input.agentAccount ?? null, isWritable: false },
    invitationAccount: {
      value: input.invitationAccount ?? null,
      isWritable: false,
    },
    feePayer: { value: input.feePayer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    registeredProgramId: {
      value: input.registeredProgramId ?? null,
      isWritable: false,
    },
    noopProgram: { value: input.noopProgram ?? null, isWritable: false },
    accountCompressionAuthority: {
      value: input.accountCompressionAuthority ?? null,
      isWritable: false,
    },
    accountCompressionProgram: {
      value: input.accountCompressionProgram ?? null,
      isWritable: false,
    },
    merkleTree: { value: input.merkleTree ?? null, isWritable: false },
    nullifierQueue: { value: input.nullifierQueue ?? null, isWritable: false },
    cpiAuthorityPda: {
      value: input.cpiAuthorityPda ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.invitationAccount),
      getAccountMeta(accounts.feePayer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.registeredProgramId),
      getAccountMeta(accounts.noopProgram),
      getAccountMeta(accounts.accountCompressionAuthority),
      getAccountMeta(accounts.accountCompressionProgram),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.nullifierQueue),
      getAccountMeta(accounts.cpiAuthorityPda),
    ],
    programAddress,
    data: getJoinChannelCompressedInstructionDataEncoder().encode(
      args as JoinChannelCompressedInstructionDataArgs
    ),
  } as JoinChannelCompressedInstruction<
    TProgramAddress,
    TAccountChannelAccount,
    TAccountAgentAccount,
    TAccountInvitationAccount,
    TAccountFeePayer,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountRegisteredProgramId,
    TAccountNoopProgram,
    TAccountAccountCompressionAuthority,
    TAccountAccountCompressionProgram,
    TAccountMerkleTree,
    TAccountNullifierQueue,
    TAccountCpiAuthorityPda
  >;

  return instruction;
}

export type ParsedJoinChannelCompressedInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    channelAccount: TAccountMetas[0];
    agentAccount: TAccountMetas[1];
    invitationAccount?: TAccountMetas[2] | undefined;
    feePayer: TAccountMetas[3];
    authority: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    registeredProgramId: TAccountMetas[6];
    noopProgram: TAccountMetas[7];
    accountCompressionAuthority: TAccountMetas[8];
    accountCompressionProgram: TAccountMetas[9];
    merkleTree: TAccountMetas[10];
    nullifierQueue: TAccountMetas[11];
    cpiAuthorityPda: TAccountMetas[12];
  };
  data: JoinChannelCompressedInstructionData;
};

export function parseJoinChannelCompressedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedJoinChannelCompressedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === POD_COM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      channelAccount: getNextAccount(),
      agentAccount: getNextAccount(),
      invitationAccount: getNextOptionalAccount(),
      feePayer: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
      registeredProgramId: getNextAccount(),
      noopProgram: getNextAccount(),
      accountCompressionAuthority: getNextAccount(),
      accountCompressionProgram: getNextAccount(),
      merkleTree: getNextAccount(),
      nullifierQueue: getNextAccount(),
      cpiAuthorityPda: getNextAccount(),
    },
    data: getJoinChannelCompressedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
