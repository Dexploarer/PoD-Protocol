/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const GET_CHANNEL_PARTICIPANTS_DISCRIMINATOR = new Uint8Array([
  87, 16, 96, 73, 86, 56, 98, 70,
]);

export function getGetChannelParticipantsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GET_CHANNEL_PARTICIPANTS_DISCRIMINATOR
  );
}

export type GetChannelParticipantsInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountChannelAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountChannelAccount extends string
        ? ReadonlyAccount<TAccountChannelAccount>
        : TAccountChannelAccount,
      ...TRemainingAccounts,
    ]
  >;

export type GetChannelParticipantsInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type GetChannelParticipantsInstructionDataArgs = {};

export function getGetChannelParticipantsInstructionDataEncoder(): Encoder<GetChannelParticipantsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: GET_CHANNEL_PARTICIPANTS_DISCRIMINATOR,
    })
  );
}

export function getGetChannelParticipantsInstructionDataDecoder(): Decoder<GetChannelParticipantsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getGetChannelParticipantsInstructionDataCodec(): Codec<
  GetChannelParticipantsInstructionDataArgs,
  GetChannelParticipantsInstructionData
> {
  return combineCodec(
    getGetChannelParticipantsInstructionDataEncoder(),
    getGetChannelParticipantsInstructionDataDecoder()
  );
}

export type GetChannelParticipantsInput<
  TAccountChannelAccount extends string = string,
> = {
  channelAccount: Address<TAccountChannelAccount>;
};

export function getGetChannelParticipantsInstruction<
  TAccountChannelAccount extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: GetChannelParticipantsInput<TAccountChannelAccount>,
  config?: { programAddress?: TProgramAddress }
): GetChannelParticipantsInstruction<TProgramAddress, TAccountChannelAccount> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.channelAccount)],
    programAddress,
    data: getGetChannelParticipantsInstructionDataEncoder().encode({}),
  } as GetChannelParticipantsInstruction<
    TProgramAddress,
    TAccountChannelAccount
  >;

  return instruction;
}

export type ParsedGetChannelParticipantsInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    channelAccount: TAccountMetas[0];
  };
  data: GetChannelParticipantsInstructionData;
};

export function parseGetChannelParticipantsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedGetChannelParticipantsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      channelAccount: getNextAccount(),
    },
    data: getGetChannelParticipantsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
