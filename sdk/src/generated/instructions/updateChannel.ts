/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_CHANNEL_DISCRIMINATOR = new Uint8Array([
  75, 204, 94, 165, 60, 180, 193, 217,
]);

export function getUpdateChannelDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_CHANNEL_DISCRIMINATOR
  );
}

export type UpdateChannelInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountChannelAccount extends string | IAccountMeta<string> = string,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountChannelAccount extends string
        ? WritableAccount<TAccountChannelAccount>
        : TAccountChannelAccount,
      TAccountSigner extends string
        ? ReadonlySignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateChannelInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: Option<string>;
  description: Option<string>;
  maxParticipants: Option<number>;
  feePerMessage: Option<bigint>;
  isActive: Option<boolean>;
};

export type UpdateChannelInstructionDataArgs = {
  name: OptionOrNullable<string>;
  description: OptionOrNullable<string>;
  maxParticipants: OptionOrNullable<number>;
  feePerMessage: OptionOrNullable<number | bigint>;
  isActive: OptionOrNullable<boolean>;
};

export function getUpdateChannelInstructionDataEncoder(): Encoder<UpdateChannelInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      [
        'name',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      [
        'description',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['maxParticipants', getOptionEncoder(getU32Encoder())],
      ['feePerMessage', getOptionEncoder(getU64Encoder())],
      ['isActive', getOptionEncoder(getBooleanEncoder())],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_CHANNEL_DISCRIMINATOR })
  );
}

export function getUpdateChannelInstructionDataDecoder(): Decoder<UpdateChannelInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    [
      'name',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'description',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['maxParticipants', getOptionDecoder(getU32Decoder())],
    ['feePerMessage', getOptionDecoder(getU64Decoder())],
    ['isActive', getOptionDecoder(getBooleanDecoder())],
  ]);
}

export function getUpdateChannelInstructionDataCodec(): Codec<
  UpdateChannelInstructionDataArgs,
  UpdateChannelInstructionData
> {
  return combineCodec(
    getUpdateChannelInstructionDataEncoder(),
    getUpdateChannelInstructionDataDecoder()
  );
}

export type UpdateChannelInput<
  TAccountChannelAccount extends string = string,
  TAccountSigner extends string = string,
> = {
  channelAccount: Address<TAccountChannelAccount>;
  signer: TransactionSigner<TAccountSigner>;
  name: UpdateChannelInstructionDataArgs['name'];
  description: UpdateChannelInstructionDataArgs['description'];
  maxParticipants: UpdateChannelInstructionDataArgs['maxParticipants'];
  feePerMessage: UpdateChannelInstructionDataArgs['feePerMessage'];
  isActive: UpdateChannelInstructionDataArgs['isActive'];
};

export function getUpdateChannelInstruction<
  TAccountChannelAccount extends string,
  TAccountSigner extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: UpdateChannelInput<TAccountChannelAccount, TAccountSigner>,
  config?: { programAddress?: TProgramAddress }
): UpdateChannelInstruction<
  TProgramAddress,
  TAccountChannelAccount,
  TAccountSigner
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.signer),
    ],
    programAddress,
    data: getUpdateChannelInstructionDataEncoder().encode(
      args as UpdateChannelInstructionDataArgs
    ),
  } as UpdateChannelInstruction<
    TProgramAddress,
    TAccountChannelAccount,
    TAccountSigner
  >;

  return instruction;
}

export type ParsedUpdateChannelInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    channelAccount: TAccountMetas[0];
    signer: TAccountMetas[1];
  };
  data: UpdateChannelInstructionData;
};

export function parseUpdateChannelInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateChannelInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    throw new Error('UpdateChannel instruction: Insufficient accounts provided. Expected at least 2 accounts (channelAccount, creator)');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      channelAccount: getNextAccount(),
      signer: getNextAccount(),
    },
    data: getUpdateChannelInstructionDataDecoder().decode(instruction.data),
  };
}
