/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const UPDATE_AGENT_DISCRIMINATOR = new Uint8Array([
  85, 2, 178, 9, 119, 139, 102, 164,
]);

export function getUpdateAgentDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_AGENT_DISCRIMINATOR
  );
}

export type UpdateAgentInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountAgentAccount extends string | IAccountMeta<string> = string,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAgentAccount extends string
        ? WritableAccount<TAccountAgentAccount>
        : TAccountAgentAccount,
      TAccountSigner extends string
        ? ReadonlySignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateAgentInstructionData = {
  discriminator: ReadonlyUint8Array;
  capabilities: Option<bigint>;
  metadataUri: Option<string>;
};

export type UpdateAgentInstructionDataArgs = {
  capabilities: OptionOrNullable<number | bigint>;
  metadataUri: OptionOrNullable<string>;
};

export function getUpdateAgentInstructionDataEncoder(): Encoder<UpdateAgentInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['capabilities', getOptionEncoder(getU64Encoder())],
      [
        'metadataUri',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_AGENT_DISCRIMINATOR })
  );
}

export function getUpdateAgentInstructionDataDecoder(): Decoder<UpdateAgentInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['capabilities', getOptionDecoder(getU64Decoder())],
    [
      'metadataUri',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getUpdateAgentInstructionDataCodec(): Codec<
  UpdateAgentInstructionDataArgs,
  UpdateAgentInstructionData
> {
  return combineCodec(
    getUpdateAgentInstructionDataEncoder(),
    getUpdateAgentInstructionDataDecoder()
  );
}

export type UpdateAgentAsyncInput<
  TAccountAgentAccount extends string = string,
  TAccountSigner extends string = string,
> = {
  agentAccount?: Address<TAccountAgentAccount>;
  signer: TransactionSigner<TAccountSigner>;
  capabilities: UpdateAgentInstructionDataArgs['capabilities'];
  metadataUri: UpdateAgentInstructionDataArgs['metadataUri'];
};

export async function getUpdateAgentInstructionAsync<
  TAccountAgentAccount extends string,
  TAccountSigner extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: UpdateAgentAsyncInput<TAccountAgentAccount, TAccountSigner>,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateAgentInstruction<TProgramAddress, TAccountAgentAccount, TAccountSigner>
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    agentAccount: { value: input.agentAccount ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.agentAccount.value) {
    accounts.agentAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.signer),
    ],
    programAddress,
    data: getUpdateAgentInstructionDataEncoder().encode(
      args as UpdateAgentInstructionDataArgs
    ),
  } as UpdateAgentInstruction<
    TProgramAddress,
    TAccountAgentAccount,
    TAccountSigner
  >;

  return instruction;
}

export type UpdateAgentInput<
  TAccountAgentAccount extends string = string,
  TAccountSigner extends string = string,
> = {
  agentAccount: Address<TAccountAgentAccount>;
  signer: TransactionSigner<TAccountSigner>;
  capabilities: UpdateAgentInstructionDataArgs['capabilities'];
  metadataUri: UpdateAgentInstructionDataArgs['metadataUri'];
};

export function getUpdateAgentInstruction<
  TAccountAgentAccount extends string,
  TAccountSigner extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: UpdateAgentInput<TAccountAgentAccount, TAccountSigner>,
  config?: { programAddress?: TProgramAddress }
): UpdateAgentInstruction<
  TProgramAddress,
  TAccountAgentAccount,
  TAccountSigner
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    agentAccount: { value: input.agentAccount ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.signer),
    ],
    programAddress,
    data: getUpdateAgentInstructionDataEncoder().encode(
      args as UpdateAgentInstructionDataArgs
    ),
  } as UpdateAgentInstruction<
    TProgramAddress,
    TAccountAgentAccount,
    TAccountSigner
  >;

  return instruction;
}

export type ParsedUpdateAgentInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    agentAccount: TAccountMetas[0];
    signer: TAccountMetas[1];
  };
  data: UpdateAgentInstructionData;
};

export function parseUpdateAgentInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateAgentInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      agentAccount: getNextAccount(),
      signer: getNextAccount(),
    },
    data: getUpdateAgentInstructionDataDecoder().decode(instruction.data),
  };
}
