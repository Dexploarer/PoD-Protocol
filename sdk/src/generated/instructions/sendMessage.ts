/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getMessageTypeDecoder,
  getMessageTypeEncoder,
  type MessageType,
  type MessageTypeArgs,
} from '../types';

export const SEND_MESSAGE_DISCRIMINATOR = new Uint8Array([
  57, 40, 34, 178, 189, 10, 65, 26,
]);

export function getSendMessageDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SEND_MESSAGE_DISCRIMINATOR
  );
}

export type SendMessageInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountMessageAccount extends string | IAccountMeta<string> = string,
  TAccountSenderAgent extends string | IAccountMeta<string> = string,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMessageAccount extends string
        ? WritableAccount<TAccountMessageAccount>
        : TAccountMessageAccount,
      TAccountSenderAgent extends string
        ? ReadonlyAccount<TAccountSenderAgent>
        : TAccountSenderAgent,
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SendMessageInstructionData = {
  discriminator: ReadonlyUint8Array;
  recipient: Address;
  payloadHash: Array<number>;
  messageType: MessageType;
};

export type SendMessageInstructionDataArgs = {
  recipient: Address;
  payloadHash: Array<number>;
  messageType: MessageTypeArgs;
};

export function getSendMessageInstructionDataEncoder(): Encoder<SendMessageInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['recipient', getAddressEncoder()],
      ['payloadHash', getArrayEncoder(getU8Encoder(), { size: 32 })],
      ['messageType', getMessageTypeEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SEND_MESSAGE_DISCRIMINATOR })
  );
}

export function getSendMessageInstructionDataDecoder(): Decoder<SendMessageInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['recipient', getAddressDecoder()],
    ['payloadHash', getArrayDecoder(getU8Decoder(), { size: 32 })],
    ['messageType', getMessageTypeDecoder()],
  ]);
}

export function getSendMessageInstructionDataCodec(): Codec<
  SendMessageInstructionDataArgs,
  SendMessageInstructionData
> {
  return combineCodec(
    getSendMessageInstructionDataEncoder(),
    getSendMessageInstructionDataDecoder()
  );
}

export type SendMessageAsyncInput<
  TAccountMessageAccount extends string = string,
  TAccountSenderAgent extends string = string,
  TAccountSigner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  messageAccount: Address<TAccountMessageAccount>;
  senderAgent?: Address<TAccountSenderAgent>;
  signer: TransactionSigner<TAccountSigner>;
  systemProgram?: Address<TAccountSystemProgram>;
  recipient: SendMessageInstructionDataArgs['recipient'];
  payloadHash: SendMessageInstructionDataArgs['payloadHash'];
  messageType: SendMessageInstructionDataArgs['messageType'];
};

export async function getSendMessageInstructionAsync<
  TAccountMessageAccount extends string,
  TAccountSenderAgent extends string,
  TAccountSigner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: SendMessageAsyncInput<
    TAccountMessageAccount,
    TAccountSenderAgent,
    TAccountSigner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SendMessageInstruction<
    TProgramAddress,
    TAccountMessageAccount,
    TAccountSenderAgent,
    TAccountSigner,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    messageAccount: { value: input.messageAccount ?? null, isWritable: true },
    senderAgent: { value: input.senderAgent ?? null, isWritable: false },
    signer: { value: input.signer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.senderAgent.value) {
    accounts.senderAgent.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.messageAccount),
      getAccountMeta(accounts.senderAgent),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSendMessageInstructionDataEncoder().encode(
      args as SendMessageInstructionDataArgs
    ),
  } as SendMessageInstruction<
    TProgramAddress,
    TAccountMessageAccount,
    TAccountSenderAgent,
    TAccountSigner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type SendMessageInput<
  TAccountMessageAccount extends string = string,
  TAccountSenderAgent extends string = string,
  TAccountSigner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  messageAccount: Address<TAccountMessageAccount>;
  senderAgent: Address<TAccountSenderAgent>;
  signer: TransactionSigner<TAccountSigner>;
  systemProgram?: Address<TAccountSystemProgram>;
  recipient: SendMessageInstructionDataArgs['recipient'];
  payloadHash: SendMessageInstructionDataArgs['payloadHash'];
  messageType: SendMessageInstructionDataArgs['messageType'];
};

export function getSendMessageInstruction<
  TAccountMessageAccount extends string,
  TAccountSenderAgent extends string,
  TAccountSigner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: SendMessageInput<
    TAccountMessageAccount,
    TAccountSenderAgent,
    TAccountSigner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SendMessageInstruction<
  TProgramAddress,
  TAccountMessageAccount,
  TAccountSenderAgent,
  TAccountSigner,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    messageAccount: { value: input.messageAccount ?? null, isWritable: true },
    senderAgent: { value: input.senderAgent ?? null, isWritable: false },
    signer: { value: input.signer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.messageAccount),
      getAccountMeta(accounts.senderAgent),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSendMessageInstructionDataEncoder().encode(
      args as SendMessageInstructionDataArgs
    ),
  } as SendMessageInstruction<
    TProgramAddress,
    TAccountMessageAccount,
    TAccountSenderAgent,
    TAccountSigner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedSendMessageInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    messageAccount: TAccountMetas[0];
    senderAgent: TAccountMetas[1];
    signer: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: SendMessageInstructionData;
};

export function parseSendMessageInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSendMessageInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      messageAccount: getNextAccount(),
      senderAgent: getNextAccount(),
      signer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSendMessageInstructionDataDecoder().decode(instruction.data),
  };
}
