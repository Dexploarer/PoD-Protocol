/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';

/** InvalidMetadataUriLength: Invalid metadata URI length */
export const POD_COM_ERROR__INVALID_METADATA_URI_LENGTH = 0x1770; // 6000
/** Unauthorized: Unauthorized */
export const POD_COM_ERROR__UNAUTHORIZED = 0x1771; // 6001
/** MessageExpired: Message expired */
export const POD_COM_ERROR__MESSAGE_EXPIRED = 0x1772; // 6002
/** InvalidMessageStatusTransition: Invalid message status transition */
export const POD_COM_ERROR__INVALID_MESSAGE_STATUS_TRANSITION = 0x1773; // 6003
/** ChannelFull: Channel is full */
export const POD_COM_ERROR__CHANNEL_FULL = 0x1774; // 6004
/** AlreadyInChannel: Already in channel */
export const POD_COM_ERROR__ALREADY_IN_CHANNEL = 0x1775; // 6005
/** NotInChannel: Not in channel */
export const POD_COM_ERROR__NOT_IN_CHANNEL = 0x1776; // 6006
/** InsufficientFunds: Insufficient funds */
export const POD_COM_ERROR__INSUFFICIENT_FUNDS = 0x1777; // 6007
/** ChannelNameTooLong: Channel name too long */
export const POD_COM_ERROR__CHANNEL_NAME_TOO_LONG = 0x1778; // 6008
/** ChannelDescriptionTooLong: Channel description too long */
export const POD_COM_ERROR__CHANNEL_DESCRIPTION_TOO_LONG = 0x1779; // 6009
/** InsufficientReputation: Insufficient reputation */
export const POD_COM_ERROR__INSUFFICIENT_REPUTATION = 0x177a; // 6010
/** RateLimitExceeded: Rate limit exceeded */
export const POD_COM_ERROR__RATE_LIMIT_EXCEEDED = 0x177b; // 6011
/** MessageContentTooLong: Message content too long */
export const POD_COM_ERROR__MESSAGE_CONTENT_TOO_LONG = 0x177c; // 6012
/** PrivateChannelRequiresInvitation: Private channel requires invitation */
export const POD_COM_ERROR__PRIVATE_CHANNEL_REQUIRES_INVITATION = 0x177d; // 6013
/** HashingFailed: Hashing operation failed */
export const POD_COM_ERROR__HASHING_FAILED = 0x177e; // 6014
/** SecureMemoryAllocationFailed: Secure memory allocation failed */
export const POD_COM_ERROR__SECURE_MEMORY_ALLOCATION_FAILED = 0x177f; // 6015
/** InvalidTimestamp: Invalid timestamp */
export const POD_COM_ERROR__INVALID_TIMESTAMP = 0x1780; // 6016
/** InvalidMessageHash: Invalid message hash */
export const POD_COM_ERROR__INVALID_MESSAGE_HASH = 0x1781; // 6017

export type PodComError =
  | typeof POD_COM_ERROR__ALREADY_IN_CHANNEL
  | typeof POD_COM_ERROR__CHANNEL_DESCRIPTION_TOO_LONG
  | typeof POD_COM_ERROR__CHANNEL_FULL
  | typeof POD_COM_ERROR__CHANNEL_NAME_TOO_LONG
  | typeof POD_COM_ERROR__HASHING_FAILED
  | typeof POD_COM_ERROR__INSUFFICIENT_FUNDS
  | typeof POD_COM_ERROR__INSUFFICIENT_REPUTATION
  | typeof POD_COM_ERROR__INVALID_MESSAGE_HASH
  | typeof POD_COM_ERROR__INVALID_MESSAGE_STATUS_TRANSITION
  | typeof POD_COM_ERROR__INVALID_METADATA_URI_LENGTH
  | typeof POD_COM_ERROR__INVALID_TIMESTAMP
  | typeof POD_COM_ERROR__MESSAGE_CONTENT_TOO_LONG
  | typeof POD_COM_ERROR__MESSAGE_EXPIRED
  | typeof POD_COM_ERROR__NOT_IN_CHANNEL
  | typeof POD_COM_ERROR__PRIVATE_CHANNEL_REQUIRES_INVITATION
  | typeof POD_COM_ERROR__RATE_LIMIT_EXCEEDED
  | typeof POD_COM_ERROR__SECURE_MEMORY_ALLOCATION_FAILED
  | typeof POD_COM_ERROR__UNAUTHORIZED;

let podComErrorMessages: Record<PodComError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  podComErrorMessages = {
    [POD_COM_ERROR__ALREADY_IN_CHANNEL]: `Already in channel`,
    [POD_COM_ERROR__CHANNEL_DESCRIPTION_TOO_LONG]: `Channel description too long`,
    [POD_COM_ERROR__CHANNEL_FULL]: `Channel is full`,
    [POD_COM_ERROR__CHANNEL_NAME_TOO_LONG]: `Channel name too long`,
    [POD_COM_ERROR__HASHING_FAILED]: `Hashing operation failed`,
    [POD_COM_ERROR__INSUFFICIENT_FUNDS]: `Insufficient funds`,
    [POD_COM_ERROR__INSUFFICIENT_REPUTATION]: `Insufficient reputation`,
    [POD_COM_ERROR__INVALID_MESSAGE_HASH]: `Invalid message hash`,
    [POD_COM_ERROR__INVALID_MESSAGE_STATUS_TRANSITION]: `Invalid message status transition`,
    [POD_COM_ERROR__INVALID_METADATA_URI_LENGTH]: `Invalid metadata URI length`,
    [POD_COM_ERROR__INVALID_TIMESTAMP]: `Invalid timestamp`,
    [POD_COM_ERROR__MESSAGE_CONTENT_TOO_LONG]: `Message content too long`,
    [POD_COM_ERROR__MESSAGE_EXPIRED]: `Message expired`,
    [POD_COM_ERROR__NOT_IN_CHANNEL]: `Not in channel`,
    [POD_COM_ERROR__PRIVATE_CHANNEL_REQUIRES_INVITATION]: `Private channel requires invitation`,
    [POD_COM_ERROR__RATE_LIMIT_EXCEEDED]: `Rate limit exceeded`,
    [POD_COM_ERROR__SECURE_MEMORY_ALLOCATION_FAILED]: `Secure memory allocation failed`,
    [POD_COM_ERROR__UNAUTHORIZED]: `Unauthorized`,
  };
}

export function getPodComErrorMessage(code: PodComError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (podComErrorMessages as Record<PodComError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isPodComError<TProgramErrorCode extends PodComError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    POD_COM_PROGRAM_ADDRESS,
    code
  );
}
