/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const ESCROW_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  36, 69, 48, 18, 128, 225, 125, 135,
]);

export function getEscrowAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ESCROW_ACCOUNT_DISCRIMINATOR
  );
}

export type EscrowAccount = {
  discriminator: ReadonlyUint8Array;
  channel: Address;
  depositor: Address;
  amount: bigint;
  createdAt: bigint;
  bump: number;
  reserved: Array<number>;
};

export type EscrowAccountArgs = {
  channel: Address;
  depositor: Address;
  amount: number | bigint;
  createdAt: number | bigint;
  bump: number;
  reserved: Array<number>;
};

export function getEscrowAccountEncoder(): Encoder<EscrowAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['channel', getAddressEncoder()],
      ['depositor', getAddressEncoder()],
      ['amount', getU64Encoder()],
      ['createdAt', getI64Encoder()],
      ['bump', getU8Encoder()],
      ['reserved', getArrayEncoder(getU8Encoder(), { size: 7 })],
    ]),
    (value) => ({ ...value, discriminator: ESCROW_ACCOUNT_DISCRIMINATOR })
  );
}

export function getEscrowAccountDecoder(): Decoder<EscrowAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['channel', getAddressDecoder()],
    ['depositor', getAddressDecoder()],
    ['amount', getU64Decoder()],
    ['createdAt', getI64Decoder()],
    ['bump', getU8Decoder()],
    ['reserved', getArrayDecoder(getU8Decoder(), { size: 7 })],
  ]);
}

export function getEscrowAccountCodec(): Codec<
  EscrowAccountArgs,
  EscrowAccount
> {
  return combineCodec(getEscrowAccountEncoder(), getEscrowAccountDecoder());
}

export function decodeEscrowAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<EscrowAccount, TAddress>;
export function decodeEscrowAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<EscrowAccount, TAddress>;
export function decodeEscrowAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<EscrowAccount, TAddress> | MaybeAccount<EscrowAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getEscrowAccountDecoder()
  );
}

export async function fetchEscrowAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<EscrowAccount, TAddress>> {
  const maybeAccount = await fetchMaybeEscrowAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeEscrowAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<EscrowAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeEscrowAccount(maybeAccount);
}

export async function fetchAllEscrowAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<EscrowAccount>[]> {
  const maybeAccounts = await fetchAllMaybeEscrowAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeEscrowAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<EscrowAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeEscrowAccount(maybeAccount));
}
