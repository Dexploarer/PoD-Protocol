/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getMessageTypeDecoder,
  getMessageTypeEncoder,
  type MessageType,
  type MessageTypeArgs,
} from '../types';

export const CHANNEL_MESSAGE_DISCRIMINATOR = new Uint8Array([
  172, 149, 77, 27, 88, 227, 80, 87,
]);

export function getChannelMessageDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CHANNEL_MESSAGE_DISCRIMINATOR
  );
}

export type ChannelMessage = {
  discriminator: ReadonlyUint8Array;
  channel: Address;
  sender: Address;
  replyTo: Option<Address>;
  createdAt: bigint;
  editedAt: Option<bigint>;
  content: string;
  messageType: MessageType;
  bump: number;
  reserved: Array<number>;
};

export type ChannelMessageArgs = {
  channel: Address;
  sender: Address;
  replyTo: OptionOrNullable<Address>;
  createdAt: number | bigint;
  editedAt: OptionOrNullable<number | bigint>;
  content: string;
  messageType: MessageTypeArgs;
  bump: number;
  reserved: Array<number>;
};

export function getChannelMessageEncoder(): Encoder<ChannelMessageArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['channel', getAddressEncoder()],
      ['sender', getAddressEncoder()],
      ['replyTo', getOptionEncoder(getAddressEncoder())],
      ['createdAt', getI64Encoder()],
      ['editedAt', getOptionEncoder(getI64Encoder())],
      ['content', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['messageType', getMessageTypeEncoder()],
      ['bump', getU8Encoder()],
      ['reserved', getArrayEncoder(getU8Encoder(), { size: 6 })],
    ]),
    (value) => ({ ...value, discriminator: CHANNEL_MESSAGE_DISCRIMINATOR })
  );
}

export function getChannelMessageDecoder(): Decoder<ChannelMessage> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['channel', getAddressDecoder()],
    ['sender', getAddressDecoder()],
    ['replyTo', getOptionDecoder(getAddressDecoder())],
    ['createdAt', getI64Decoder()],
    ['editedAt', getOptionDecoder(getI64Decoder())],
    ['content', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['messageType', getMessageTypeDecoder()],
    ['bump', getU8Decoder()],
    ['reserved', getArrayDecoder(getU8Decoder(), { size: 6 })],
  ]);
}

export function getChannelMessageCodec(): Codec<
  ChannelMessageArgs,
  ChannelMessage
> {
  return combineCodec(getChannelMessageEncoder(), getChannelMessageDecoder());
}

export function decodeChannelMessage<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ChannelMessage, TAddress>;
export function decodeChannelMessage<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ChannelMessage, TAddress>;
export function decodeChannelMessage<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ChannelMessage, TAddress> | MaybeAccount<ChannelMessage, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getChannelMessageDecoder()
  );
}

export async function fetchChannelMessage<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ChannelMessage, TAddress>> {
  const maybeAccount = await fetchMaybeChannelMessage(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeChannelMessage<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ChannelMessage, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeChannelMessage(maybeAccount);
}

export async function fetchAllChannelMessage(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ChannelMessage>[]> {
  const maybeAccounts = await fetchAllMaybeChannelMessage(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeChannelMessage(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ChannelMessage>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeChannelMessage(maybeAccount)
  );
}
