/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const CHANNEL_PARTICIPANT_DISCRIMINATOR = new Uint8Array([
  147, 89, 184, 207, 10, 190, 78, 145,
]);

export function getChannelParticipantDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CHANNEL_PARTICIPANT_DISCRIMINATOR
  );
}

export type ChannelParticipant = {
  discriminator: ReadonlyUint8Array;
  channel: Address;
  participant: Address;
  joinedAt: bigint;
  messagesSent: bigint;
  lastMessageAt: bigint;
  isActive: boolean;
  bump: number;
  reserved: Array<number>;
};

export type ChannelParticipantArgs = {
  channel: Address;
  participant: Address;
  joinedAt: number | bigint;
  messagesSent: number | bigint;
  lastMessageAt: number | bigint;
  isActive: boolean;
  bump: number;
  reserved: Array<number>;
};

export function getChannelParticipantEncoder(): Encoder<ChannelParticipantArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['channel', getAddressEncoder()],
      ['participant', getAddressEncoder()],
      ['joinedAt', getI64Encoder()],
      ['messagesSent', getU64Encoder()],
      ['lastMessageAt', getI64Encoder()],
      ['isActive', getBooleanEncoder()],
      ['bump', getU8Encoder()],
      ['reserved', getArrayEncoder(getU8Encoder(), { size: 6 })],
    ]),
    (value) => ({ ...value, discriminator: CHANNEL_PARTICIPANT_DISCRIMINATOR })
  );
}

export function getChannelParticipantDecoder(): Decoder<ChannelParticipant> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['channel', getAddressDecoder()],
    ['participant', getAddressDecoder()],
    ['joinedAt', getI64Decoder()],
    ['messagesSent', getU64Decoder()],
    ['lastMessageAt', getI64Decoder()],
    ['isActive', getBooleanDecoder()],
    ['bump', getU8Decoder()],
    ['reserved', getArrayDecoder(getU8Decoder(), { size: 6 })],
  ]);
}

export function getChannelParticipantCodec(): Codec<
  ChannelParticipantArgs,
  ChannelParticipant
> {
  return combineCodec(
    getChannelParticipantEncoder(),
    getChannelParticipantDecoder()
  );
}

export function decodeChannelParticipant<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ChannelParticipant, TAddress>;
export function decodeChannelParticipant<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ChannelParticipant, TAddress>;
export function decodeChannelParticipant<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ChannelParticipant, TAddress>
  | MaybeAccount<ChannelParticipant, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getChannelParticipantDecoder()
  );
}

export async function fetchChannelParticipant<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ChannelParticipant, TAddress>> {
  const maybeAccount = await fetchMaybeChannelParticipant(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeChannelParticipant<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ChannelParticipant, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeChannelParticipant(maybeAccount);
}

export async function fetchAllChannelParticipant(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ChannelParticipant>[]> {
  const maybeAccounts = await fetchAllMaybeChannelParticipant(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeChannelParticipant(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ChannelParticipant>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeChannelParticipant(maybeAccount)
  );
}
