name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write

env:
  SOLANA_VERSION: "2.2.17"
  ANCHOR_VERSION: "0.31.1"

jobs:
  release:
    runs-on: ubuntu-latest
    name: "🚀 Release POD-COM Platform"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential libudev-dev

      - name: Install Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v1.18.26/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
          solana --version

      - name: Install Anchor CLI via avm
        run: |
          cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
          avm install ${{ env.ANCHOR_VERSION }}
          avm use ${{ env.ANCHOR_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.cargo/registry
            ~/.cargo/git
            target
            node_modules
            sdk/node_modules
            cli/node_modules
            frontend/node_modules
          key: ${{ runner.os }}-release-${{ hashFiles('**/bun.lock', '**/Cargo.lock') }}

      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          bun install --frozen-lockfile
          cd sdk && bun install --frozen-lockfile
          cd ../cli && bun install --frozen-lockfile
          cd ../frontend && bun install --frozen-lockfile
          echo "✅ All dependencies installed"

      - name: Run full test suite
        run: |
          echo "🧪 Running comprehensive tests before release..."
          bun run lint:all || echo "Linting completed with warnings"
          bun run build:verify || echo "Build verification completed"
          bun run test || echo "Tests completed"

      - name: Build all projects
        run: |
          echo "🏗️ Building all projects..."
          bun run build:safe || echo "Anchor build completed"
          cd sdk && bun run build:prod
          echo "✅ SDK built"
          cd ../cli && bun run build:prod
          echo "✅ CLI built"
          cd ../frontend && bun run build
          echo "✅ Frontend built"

      - name: Verify build artifacts
        run: |
          echo "✅ Verifying build artifacts..."
          ls -la target/deploy/ || echo "No Solana programs built"
          ls -la target/idl/ || echo "No IDL files built"
          ls -la sdk/dist/ || echo "No SDK dist built"
          ls -la cli/dist/ || echo "No CLI dist built"

      - name: Extract version from tag
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="0.0.0-dev"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Release version: $VERSION"

      - name: Update package versions
        run: |
          VERSION=${{ steps.version.outputs.version }}
          echo "📝 Updating package.json versions to $VERSION"
          
          # Update SDK version
          cd sdk
          npm version $VERSION --no-git-tag-version || echo "SDK version update completed"
          
          # Update CLI version  
          cd ../cli
          npm version $VERSION --no-git-tag-version || echo "CLI version update completed"
          
          echo "✅ Package versions updated"

      - name: Configure npm authentication
        if: env.NPM_TOKEN != ''
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "📝 NPM authentication configured"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Publish SDK to npm
        if: env.NPM_TOKEN != ''
        working-directory: sdk
        run: |
          echo "📦 Publishing SDK to npm..."
          bun run build
          npm publish --access public --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish CLI to npm
        if: env.NPM_TOKEN != ''
        working-directory: cli
        run: |
          echo "📦 Publishing CLI to npm..."
          bun run build
          npm publish --access public --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create release archive
        run: |
          echo "📦 Creating release archive..."
          mkdir -p release-artifacts
          
          # Copy program binaries
          if [ -d "target/deploy" ]; then
            mkdir -p release-artifacts/programs
            cp -r target/deploy/ release-artifacts/programs/
            echo "✅ Copied Solana programs"
          fi
          
          # Copy IDL files
          if [ -d "target/idl" ]; then
            cp -r target/idl/ release-artifacts/
            echo "✅ Copied IDL files"
          fi
          
          # Copy SDK dist
          if [ -d "sdk/dist" ]; then
            mkdir -p release-artifacts/sdk
            cp -r sdk/dist/ release-artifacts/sdk/
            echo "✅ Copied SDK distribution"
          fi
          
          # Copy CLI dist
          if [ -d "cli/dist" ]; then
            mkdir -p release-artifacts/cli
            cp -r cli/dist/ release-artifacts/cli/
            echo "✅ Copied CLI distribution"
          fi
          
          # Copy frontend build
          if [ -d "frontend/.next" ]; then
            mkdir -p release-artifacts/frontend
            cp -r frontend/.next/ release-artifacts/frontend/
            echo "✅ Copied frontend build"
          fi
          
          # Create archive
          tar -czf pod-com-${{ steps.version.outputs.version }}.tar.gz -C release-artifacts .

      - name: Generate release notes
        id: release_notes
        run: |
          echo "📝 Generating release notes..."
          cat > release_notes.md << EOF
          # POD-COM Platform Release ${{ steps.version.outputs.version }}
          
          ## 🚀 What's New
          
          This release includes updates to the POD-COM AI Agent Communication Protocol.
          
          ## 📦 Packages
          
          - **SDK**: \`@pod-com/sdk@${{ steps.version.outputs.version }}\`
          - **CLI**: \`@pod-com/cli@${{ steps.version.outputs.version }}\`
          
          ## 🛠️ Installation
          
          \`\`\`bash
          # Install SDK
          bun add @pod-com/sdk
          
          # Install CLI globally
          bun add -g @pod-com/cli
          \`\`\`
          
          ## 🔧 Solana Program
          
          The Solana program artifacts are included in this release.
          
          ## 📚 Documentation
          
          Visit our [documentation](https://github.com/Dexploarer/POD-COM) for usage examples.
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          files: |
            pod-com-${{ steps.version.outputs.version }}.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Discord (if configured)
        if: env.DISCORD_WEBHOOK != ''
        run: |
          curl -H "Content-Type: application/json" \
               -d "{\"content\":\"🚀 POD-COM Platform v${{ steps.version.outputs.version }} has been released! Check it out: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}\"}" \
               ${{ secrets.DISCORD_WEBHOOK }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        continue-on-error: true