name: Frontend Deploy

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - 'vercel.json'
  pull_request:
    branches: [main]
    paths:
      - 'frontend/**'
      - 'vercel.json'
  workflow_dispatch:

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  frontend-lint-and-test:
    name: "🎨 Frontend Lint & Test"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache frontend dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: Install frontend dependencies
        run: |
          echo "📦 Installing frontend dependencies..."
          set -e
          bun install --frozen-lockfile || {
            echo "❌ Failed to install frontend dependencies"
            exit 1
          }
          echo "✅ Frontend dependencies installed successfully"

      - name: Lint frontend
        run: |
          echo "🎨 Running frontend linting..."
          set -e
          bun run lint || {
            echo "❌ Frontend linting failed"
            exit 1
          }
          echo "✅ Frontend linting passed"

      - name: Run frontend tests
        run: |
          echo "🧪 Running frontend tests..."
          set -e
          bun run test --passWithNoTests || {
            echo "❌ Frontend tests failed"
            exit 1
          }
          echo "✅ Frontend tests passed"

  frontend-build:
    name: "🏗️ Frontend Build"
    runs-on: ubuntu-latest
    needs: frontend-lint-and-test
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache frontend dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: Install frontend dependencies
        run: |
          echo "📦 Installing frontend dependencies..."
          set -e
          bun install --frozen-lockfile || {
            echo "❌ Failed to install frontend dependencies"
            exit 1
          }
          echo "✅ Frontend dependencies installed successfully"

      - name: Build frontend
        run: |
          echo "🏗️ Building frontend..."
          set -e
          bun run build || {
            echo "❌ Frontend build failed"
            exit 1
          }
          echo "✅ Frontend build completed successfully"

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: |
            frontend/.next/
            frontend/out/
          retention-days: 1

  deploy-preview:
    name: "🚀 Deploy Preview"
    runs-on: ubuntu-latest
    needs: frontend-build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Vercel CLI
        run: |
          echo "📦 Installing Vercel CLI..."
          set -e
          bun add -g vercel@latest || {
            echo "❌ Failed to install Vercel CLI"
            exit 1
          }
          echo "✅ Vercel CLI installed successfully"

      - name: Pull Vercel Environment Information
        run: |
          echo "🔧 Pulling Vercel environment information..."
          set -e
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }} || {
            echo "❌ Failed to pull Vercel environment information"
            exit 1
          }
          echo "✅ Vercel environment information pulled successfully"

      - name: Build Project Artifacts
        run: |
          echo "🏗️ Building project artifacts..."
          set -e
          cd frontend
          bun install --frozen-lockfile || {
            echo "❌ Failed to install dependencies"
            exit 1
          }
          vercel build --token=${{ secrets.VERCEL_TOKEN }} || {
            echo "❌ Failed to build project artifacts"
            exit 1
          }
          echo "✅ Project artifacts built successfully"

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          echo "🚀 Deploying to Vercel..."
          set -e
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}) || {
            echo "❌ Failed to deploy to Vercel"
            exit 1
          }
          echo "preview-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "🚀 Preview deployed successfully to: $DEPLOYMENT_URL"

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🚀 Frontend Preview Deployed')
            );
            
            const body = `## 🚀 Frontend Preview Deployed
            
            Your frontend changes have been deployed to Vercel!
            
            **Preview URL:** ${{ steps.deploy.outputs.preview-url }}
            
            **Commit:** \`${{ github.sha }}\`
            **Branch:** \`${{ github.head_ref }}\`
            
            This preview will be automatically updated when you push new commits to this PR.`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  deploy-production:
    name: "🌟 Deploy Production"
    runs-on: ubuntu-latest
    needs: frontend-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.production-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Vercel CLI
        run: |
          echo "📦 Installing Vercel CLI..."
          set -e
          bun add -g vercel@latest || {
            echo "❌ Failed to install Vercel CLI"
            exit 1
          }
          echo "✅ Vercel CLI installed successfully"

      - name: Pull Vercel Environment Information
        run: |
          echo "🔧 Pulling Vercel production environment information..."
          set -e
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }} || {
            echo "❌ Failed to pull Vercel production environment information"
            exit 1
          }
          echo "✅ Vercel production environment information pulled successfully"

      - name: Build Project Artifacts
        run: |
          echo "🏗️ Building production project artifacts..."
          set -e
          cd frontend
          bun install --frozen-lockfile || {
            echo "❌ Failed to install dependencies"
            exit 1
          }
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }} || {
            echo "❌ Failed to build production project artifacts"
            exit 1
          }
          echo "✅ Production project artifacts built successfully"

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          echo "🌟 Deploying to production..."
          set -e
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}) || {
            echo "❌ Failed to deploy to production"
            exit 1
          }
          echo "production-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "🌟 Production deployed successfully to: $DEPLOYMENT_URL"

      - name: Create deployment summary
        run: |
          echo "## 🌟 Frontend Production Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Production URL:** ${{ steps.deploy.outputs.production-url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed at:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- Framework: Next.js" >> $GITHUB_STEP_SUMMARY
          echo "- Package Manager: Bun" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js Runtime: 18.x" >> $GITHUB_STEP_SUMMARY
          echo "- Deployment Platform: Vercel" >> $GITHUB_STEP_SUMMARY

  deploy-develop:
    name: "🧪 Deploy Staging"
    runs-on: ubuntu-latest
    needs: frontend-build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Vercel CLI
        run: |
          echo "📦 Installing Vercel CLI..."
          set -e
          bun add -g vercel@latest || {
            echo "❌ Failed to install Vercel CLI"
            exit 1
          }
          echo "✅ Vercel CLI installed successfully"

      - name: Pull Vercel Environment Information
        run: |
          echo "🔧 Pulling Vercel staging environment information..."
          set -e
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }} || {
            echo "❌ Failed to pull Vercel staging environment information"
            exit 1
          }
          echo "✅ Vercel staging environment information pulled successfully"

      - name: Build Project Artifacts
        run: |
          echo "🏗️ Building staging project artifacts..."
          set -e
          cd frontend
          bun install --frozen-lockfile || {
            echo "❌ Failed to install dependencies"
            exit 1
          }
          vercel build --token=${{ secrets.VERCEL_TOKEN }} || {
            echo "❌ Failed to build staging project artifacts"
            exit 1
          }
          echo "✅ Staging project artifacts built successfully"

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          echo "🧪 Deploying to staging..."
          set -e
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}) || {
            echo "❌ Failed to deploy to staging"
            exit 1
          }
          echo "staging-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "🧪 Staging deployed successfully to: $DEPLOYMENT_URL"