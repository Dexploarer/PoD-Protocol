name: ü§ñ Agents CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'agents/**'
      - 'sdk/src/services/agent*'
      - 'cli/src/commands/agent*'
      - 'programs/pod-com/src/**'
  pull_request:
    branches: [main]
    paths:
      - 'agents/**'
      - 'sdk/src/services/agent*'
      - 'cli/src/commands/agent*'
      - 'programs/pod-com/src/**'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of agent tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e

permissions:
  contents: read
  checks: write
  pull-requests: write

concurrency:
  group: agents-${{ github.ref }}
  cancel-in-progress: true

env:
  SOLANA_VERSION: "2.2.17"
  ANCHOR_VERSION: "0.31.1"

jobs:
  detect-changes:
    name: "üîç Detect Agent Changes"
    runs-on: ubuntu-latest
    outputs:
      agents-changed: ${{ steps.changes.outputs.agents }}
      sdk-agent-changed: ${{ steps.changes.outputs.sdk-agent }}
      cli-agent-changed: ${{ steps.changes.outputs.cli-agent }}
      program-changed: ${{ steps.changes.outputs.program }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes
        id: changes
        run: |
          echo "üîç Detecting changes in agent-related files..."
          set -e
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "üîÑ Manual workflow trigger - checking all components"
            echo "agents=true" >> $GITHUB_OUTPUT
            echo "sdk-agent=true" >> $GITHUB_OUTPUT
            echo "cli-agent=true" >> $GITHUB_OUTPUT
            echo "program=true" >> $GITHUB_OUTPUT
          else
            echo "üìä Analyzing git diff for changes..."
            AGENTS_CHANGED=$(git diff --name-only HEAD^ HEAD | grep "agents/" | wc -l)
            SDK_AGENT_CHANGED=$(git diff --name-only HEAD^ HEAD | grep "sdk/src/services/agent" | wc -l)
            CLI_AGENT_CHANGED=$(git diff --name-only HEAD^ HEAD | grep "cli/src/commands/agent" | wc -l)
            PROGRAM_CHANGED=$(git diff --name-only HEAD^ HEAD | grep "programs/pod-com/src/" | wc -l)
            
            echo "agents=$([ $AGENTS_CHANGED -gt 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
            echo "sdk-agent=$([ $SDK_AGENT_CHANGED -gt 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
            echo "cli-agent=$([ $CLI_AGENT_CHANGED -gt 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
            echo "program=$([ $PROGRAM_CHANGED -gt 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
            
            echo "üìã Change detection results:"
            echo "  - Agents: $([ $AGENTS_CHANGED -gt 0 ] && echo true || echo false)"
            echo "  - SDK Agent: $([ $SDK_AGENT_CHANGED -gt 0 ] && echo true || echo false)"
            echo "  - CLI Agent: $([ $CLI_AGENT_CHANGED -gt 0 ] && echo true || echo false)"
            echo "  - Program: $([ $PROGRAM_CHANGED -gt 0 ] && echo true || echo false)"
          fi
          echo "‚úÖ Change detection completed successfully"

  agent-lint-and-test:
    name: "üé® Agent Linting & Testing"
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.agents-changed == 'true' || needs.detect-changes.outputs.sdk-agent-changed == 'true' || needs.detect-changes.outputs.cli-agent-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            sdk/node_modules
            cli/node_modules
          key: ${{ runner.os }}-agents-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-agents-

      - name: Install dependencies
        run: |
          echo "üì¶ Installing project dependencies..."
          set -e
          
          echo "üîß Installing root dependencies..."
          bun install --frozen-lockfile || {
            echo "‚ùå Failed to install root dependencies"
            exit 1
          }
          echo "‚úÖ Root dependencies installed successfully"
          
          echo "üîß Installing SDK dependencies..."
          cd sdk
          bun install --frozen-lockfile || {
            echo "‚ùå Failed to install SDK dependencies"
            exit 1
          }
          echo "‚úÖ SDK dependencies installed successfully"
          
          echo "üîß Installing CLI dependencies..."
          cd ../cli
          bun install --frozen-lockfile || {
            echo "‚ùå Failed to install CLI dependencies"
            exit 1
          }
          echo "‚úÖ CLI dependencies installed successfully"
          echo "üéâ All dependencies installed successfully"

      - name: Lint SDK agent services
        if: needs.detect-changes.outputs.sdk-agent-changed == 'true'
        run: |
          echo "üé® Linting SDK agent services..."
          set -e
          cd sdk
          bun run lint || {
            echo "‚ùå SDK agent service linting failed"
            exit 1
          }
          echo "‚úÖ SDK agent service linting passed"

      - name: Lint CLI agent commands
        if: needs.detect-changes.outputs.cli-agent-changed == 'true'
        run: |
          echo "üé® Linting CLI agent commands..."
          set -e
          cd cli
          bun run lint || {
            echo "‚ùå CLI agent command linting failed"
            exit 1
          }
          echo "‚úÖ CLI agent command linting passed"

      - name: Run SDK agent tests
        if: needs.detect-changes.outputs.sdk-agent-changed == 'true'
        run: |
          echo "üß™ Running SDK agent tests..."
          set -e
          cd sdk
          bun run test || {
            echo "‚ùå SDK agent tests failed"
            exit 1
          }
          echo "‚úÖ SDK agent tests passed"

      - name: Run CLI agent tests
        if: needs.detect-changes.outputs.cli-agent-changed == 'true'
        run: |
          echo "üß™ Running CLI agent tests..."
          set -e
          cd cli
          bun run test || {
            echo "‚ùå CLI agent tests failed"
            exit 1
          }
          echo "‚úÖ CLI agent tests passed"

  agent-integration-tests:
    name: "üîó Agent Integration Tests"
    runs-on: ubuntu-latest
    needs: [detect-changes, agent-lint-and-test]
    if: needs.detect-changes.outputs.program-changed == 'true' || github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          echo "üì¶ Installing system dependencies..."
          set -e
          sudo apt-get update || {
            echo "‚ùå Failed to update package lists"
            exit 1
          }
          sudo apt-get install -y pkg-config build-essential libudev-dev || {
            echo "‚ùå Failed to install system dependencies"
            exit 1
          }
          echo "‚úÖ System dependencies installed successfully"

      - name: Install Solana CLI
        run: |
          echo "‚öôÔ∏è Installing Solana CLI..."
          set -e
          sh -c "$(curl -sSfL https://release.solana.com/v1.18.26/install)" || {
            echo "‚ùå Failed to install Solana CLI"
            exit 1
          }
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          echo "‚úÖ Solana CLI installed successfully"

      - name: Install Anchor CLI
        run: |
          echo "‚öôÔ∏è Installing Anchor CLI..."
          set -e
          cargo install --git https://github.com/coral-xyz/anchor avm --locked --force || {
            echo "‚ùå Failed to install AVM"
            exit 1
          }
          avm install ${{ env.ANCHOR_VERSION }} || {
            echo "‚ùå Failed to install Anchor version ${{ env.ANCHOR_VERSION }}"
            exit 1
          }
          avm use ${{ env.ANCHOR_VERSION }} || {
            echo "‚ùå Failed to use Anchor version ${{ env.ANCHOR_VERSION }}"
            exit 1
          }
          echo "‚úÖ Anchor CLI installed and configured successfully"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.cargo/registry
            target
            node_modules
            sdk/node_modules
            cli/node_modules
          key: ${{ runner.os }}-integration-${{ hashFiles('**/bun.lock', '**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-integration-

      - name: Install dependencies
        run: |
          echo "üì¶ Installing project dependencies for integration tests..."
          set -e
          
          echo "üîß Installing root dependencies..."
          bun install --frozen-lockfile || {
            echo "‚ùå Failed to install root dependencies"
            exit 1
          }
          echo "‚úÖ Root dependencies installed successfully"
          
          echo "üîß Installing SDK dependencies..."
          cd sdk
          bun install --frozen-lockfile || {
            echo "‚ùå Failed to install SDK dependencies"
            exit 1
          }
          echo "‚úÖ SDK dependencies installed successfully"
          
          echo "üîß Installing CLI dependencies..."
          cd ../cli
          bun install --frozen-lockfile || {
            echo "‚ùå Failed to install CLI dependencies"
            exit 1
          }
          echo "‚úÖ CLI dependencies installed successfully"
          echo "üéâ All integration test dependencies installed successfully"

      - name: Build Anchor program
        run: |
          echo "‚öôÔ∏è Building Anchor program..."
          set -e
          anchor build || {
            echo "‚ùå Failed to build Anchor program"
            exit 1
          }
          echo "‚úÖ Anchor program built successfully"

      - name: Start local validator
        run: |
          echo "üèÉ Starting local Solana validator..."
          set -e
          solana-test-validator --reset --quiet & || {
            echo "‚ùå Failed to start local Solana validator"
            exit 1
          }
          sleep 10
          
          # Verify validator is running
          solana cluster-version || {
            echo "‚ùå Local validator failed to start properly"
            exit 1
          }
          echo "‚úÖ Local validator started and verified successfully"

      - name: Run agent integration tests
        run: |
          echo "üîó Running agent integration tests..."
          set -e
          
          # Configure Solana for local testing
          echo "üîß Configuring Solana for local testing..."
          solana config set --url localhost || {
            echo "‚ùå Failed to configure Solana for local testing"
            exit 1
          }
          
          # Run integration tests
          echo "üß™ Running SDK-JS integration tests..."
          cd sdk-js
          bun run test || {
            echo "‚ùå SDK-JS integration tests failed"
            exit 1
          }
          echo "‚úÖ SDK-JS integration tests passed"
          
          echo "üß™ Running core integration tests..."
          cd ../tests
          bun run test || {
            echo "‚ùå Core integration tests failed"
            exit 1
          }
          echo "‚úÖ Core integration tests passed"
          echo "üéâ All integration tests completed successfully"

  agent-e2e-tests:
    name: "üé≠ Agent E2E Tests"
    runs-on: ubuntu-latest
    needs: [detect-changes, agent-lint-and-test]
    if: github.event.inputs.test_type == 'e2e' || github.event.inputs.test_type == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            frontend/node_modules
          key: ${{ runner.os }}-e2e-${{ hashFiles('frontend/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-e2e-

      - name: Install frontend dependencies
        run: |
          echo "üì¶ Installing frontend dependencies for E2E tests..."
          set -e
          cd frontend
          bun install --frozen-lockfile || {
            echo "‚ùå Failed to install frontend dependencies"
            exit 1
          }
          echo "‚úÖ Frontend dependencies installed successfully"

      - name: Install Playwright
        run: |
          echo "üé≠ Installing Playwright..."
          set -e
          cd frontend
          bunx playwright install || {
            echo "‚ùå Failed to install Playwright"
            exit 1
          }
          echo "‚úÖ Playwright installed successfully"

      - name: Run agent E2E tests
        run: |
          echo "üé≠ Running agent E2E tests..."
          set -e
          cd frontend
          bun run test:e2e:agents || {
            echo "‚ùå Agent E2E tests failed"
            exit 1
          }
          echo "‚úÖ Agent E2E tests passed successfully"

  agent-security-audit:
    name: "üîí Agent Security Audit"
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.agents-changed == 'true' || needs.detect-changes.outputs.program-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: |
          echo "üîí Installing cargo-audit..."
          set -e
          cargo install cargo-audit --locked || {
            echo "‚ùå Failed to install cargo-audit"
            exit 1
          }
          echo "‚úÖ cargo-audit installed successfully"

      - name: Agent security patterns check
        run: |
          echo "üîç Checking for agent security patterns..."
          set -e
          
          echo "üîê Checking for hardcoded secrets in agent code..."
          # Check for hardcoded private keys or secrets in agent code
          if find . -name "*.ts" -o -name "*.js" -o -name "*.rs" | grep -E "(agent|sdk|cli)" | xargs grep -i "private.*key\|secret\|password" | grep -v "test\|example\|placeholder"; then
            echo "‚ùå Found potential hardcoded secrets in agent code"
            exit 1
          fi
          echo "‚úÖ No hardcoded secrets found"
          
          echo "‚ö†Ô∏è Checking for unsafe operations in agent code..."
          # Check for unsafe agent operations
          if find . -name "*.ts" -o -name "*.js" | grep agent | xargs grep -E "eval\|Function\|exec\|system"; then
            echo "‚ùå Found potentially unsafe operations in agent code"
            exit 1
          fi
          echo "‚úÖ No unsafe operations found"
          
          echo "üéâ All agent security checks passed"

      - name: Rust security audit for programs
        if: needs.detect-changes.outputs.program-changed == 'true'
        run: |
          echo "üîí Running Rust security audit..."
          set -e
          cd programs/pod-com
          cargo audit || {
            echo "‚ùå Rust security audit failed"
            exit 1
          }
          echo "‚úÖ Rust security audit passed"

  deployment-readiness:
    name: "üöÄ Agent Deployment Readiness"
    runs-on: ubuntu-latest
    needs: [agent-lint-and-test, agent-integration-tests, agent-security-audit]
    if: always() && !cancelled()
    steps:
      - name: Check deployment readiness
        run: |
          echo "üìã Checking agent deployment readiness..."
          
          LINT_STATUS="${{ needs.agent-lint-and-test.result }}"
          INTEGRATION_STATUS="${{ needs.agent-integration-tests.result }}"
          SECURITY_STATUS="${{ needs.agent-security-audit.result }}"
          
          echo "üé® Lint & Test Status: $LINT_STATUS"
          echo "üîó Integration Test Status: $INTEGRATION_STATUS"
          echo "üîí Security Audit Status: $SECURITY_STATUS"
          
          if [[ "$LINT_STATUS" == "success" && "$SECURITY_STATUS" == "success" ]]; then
            echo "‚úÖ Agents are ready for deployment!"
            echo "DEPLOYMENT_READY=true" >> $GITHUB_ENV
          else
            echo "‚ùå Agents are not ready for deployment"
            echo "DEPLOYMENT_READY=false" >> $GITHUB_ENV
          fi

      - name: Create deployment summary
        run: |
          echo "## ü§ñ Agent CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Linting & Unit Tests**: ${{ needs.agent-lint-and-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration Tests**: ${{ needs.agent-integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Audit**: ${{ needs.agent-security-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Status:" >> $GITHUB_STEP_SUMMARY
          if [ "$DEPLOYMENT_READY" = "true" ]; then
            echo "üü¢ **READY FOR DEPLOYMENT**" >> $GITHUB_STEP_SUMMARY
          else
            echo "üî¥ **NOT READY FOR DEPLOYMENT**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY 