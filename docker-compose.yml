version: '3.8'

services:
  app:
    image: leechael/phala-cloud-nextjs-starter:latest
    container_name: app
    ports:
      - "3000:3000"
    volumes:
      - /var/run/tappd.sock:/var/run/tappd.sock

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: pod-protocol-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-podprotocol}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev_password_change_in_production}
      POSTGRES_DB: ${DB_NAME:-podprotocol}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/api-server/api-server/prisma/migrations:/docker-entrypoint-initdb.d/migrations:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - pod-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-podprotocol} -d ${DB_NAME:-podprotocol}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: pod-protocol-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-dev_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - pod-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # API Server
  api-server:
    build:
      context: ./packages/api-server/api-server
      dockerfile: Dockerfile
    container_name: pod-protocol-api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${API_PORT:-4000}
      DATABASE_URL: postgresql://${DB_USER:-podprotocol}:${DB_PASSWORD:-dev_password_change_in_production}@postgres:5432/${DB_NAME:-podprotocol}?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD:-dev_redis_password}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-change_this_in_production_very_long_secret_key_minimum_32_chars}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      # Solana Configuration
      SOLANA_RPC_ENDPOINT: ${SOLANA_RPC_ENDPOINT:-https://api.devnet.solana.com}
      SOLANA_COMMITMENT: ${SOLANA_COMMITMENT:-confirmed}
    ports:
      - "${API_PORT:-4000}:4000"
    volumes:
      - api_logs:/app/logs
    networks:
      - pod-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MCP Server
  mcp-server:
    build:
      context: ./packages/mcp-server
      dockerfile: Dockerfile
    container_name: pod-protocol-mcp
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      MCP_MODE: ${MCP_MODE:-self-hosted}
      MCP_CONFIG_PATH: ${MCP_CONFIG_PATH:-/app/config/self-hosted.json}
      
      # PoD Protocol Configuration
      POD_RPC_ENDPOINT: ${SOLANA_RPC_ENDPOINT:-https://api.devnet.solana.com}
      POD_PROGRAM_ID: ${POD_PROGRAM_ID:-PodComXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX}
      POD_COMMITMENT: ${SOLANA_COMMITMENT:-confirmed}
      
      # Security Configuration
      JWT_SECRET: ${JWT_SECRET:-change_this_in_production_very_long_secret_key_minimum_32_chars}
      MCP_RATE_LIMIT: ${MCP_RATE_LIMIT:-120}
      MCP_MAX_MESSAGE_SIZE: ${MCP_MAX_MESSAGE_SIZE:-2097152}
      
      # Transport Configuration
      MCP_HTTP_PORT: ${MCP_HTTP_PORT:-8080}
      MCP_WS_PORT: ${MCP_WS_PORT:-8081}
      MCP_ENABLE_STDIO: ${MCP_ENABLE_STDIO:-true}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENABLE_ANALYTICS: ${ENABLE_ANALYTICS:-false}
    ports:
      - "${MCP_HTTP_PORT:-8080}:8080"  # HTTP transport
      - "${MCP_WS_PORT:-8081}:8081"    # WebSocket transport
    volumes:
      - mcp_logs:/app/logs
      - mcp_config:/app/config
    networks:
      - pod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: pod-protocol-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
      # SSL certificates (if using HTTPS)
      # - ./config/ssl:/etc/nginx/ssl:ro
    networks:
      - pod-network
    depends_on:
      - api-server
      - mcp-server
    profiles:
      - nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  mcp_logs:
    driver: local
  mcp_config:
    driver: local
  nginx_logs:
    driver: local

networks:
  pod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16